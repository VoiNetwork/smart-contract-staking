/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzcmMuY29udHJhY3QuQ29tcGVuc2F0aW9uRmFjdG9yeS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxMjYzCiAgICAvLyBjbGFzcyBDb21wZW5zYXRpb25GYWN0b3J5KEJhc2VGYWN0b3J5KToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "CompensationFactory",
    "methods": [
      {
        "name": "create",
        "args": [
          {
            "type": "address",
            "name": "owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Create compensation contract.\nArguments: - owner, who is the beneficiary - period, vesting period\nReturns: - app id"
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the CompensationFactory smart contract.
 */
export type CompensationFactory = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(address)uint64' | 'create', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: bigint
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      deploymentVersion?: IntegerState
      owner?: BinaryState
      updatable?: IntegerState
      upgrader?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CompensationFactorySig = keyof CompensationFactory['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CompensationFactorySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CompensationFactory smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CompensationFactorySig> = CompensationFactory['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompensationFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompensationFactorySig> = CompensationFactory['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CompensationFactoryCreateCalls = (typeof CompensationFactoryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CompensationFactoryCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type CompensationFactoryUpdateCalls = (typeof CompensationFactoryCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type CompensationFactoryUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type CompensationFactoryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CompensationFactoryCreateCalls) => CompensationFactoryCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: CompensationFactoryUpdateCalls) => CompensationFactoryUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CompensationFactoryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CompensationFactory smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the CompensationFactory smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create(address)uint64 ABI method
   *
   * Create compensation contract.
Arguments: - owner, who is the beneficiary - period, vesting period
Returns: - app id
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static create(args: MethodArgs<'create(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'create(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CompensationFactory smart contract
 */
export class CompensationFactoryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CompensationFactoryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CompensationFactory['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CompensationFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CompensationFactoryDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CompensationFactoryCallFactory.create)
    const updateArgs = params.updateCall?.(CompensationFactoryCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CompensationFactory smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the CompensationFactory smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CompensationFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the create(address)uint64 ABI method.
   *
   * Create compensation contract.
Arguments: - owner, who is the beneficiary - period, vesting period
Returns: - app id
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public create(args: MethodArgs<'create(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompensationFactoryCallFactory.create(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompensationFactoryCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompensationFactoryCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompensationFactoryCallFactory.grantUpgrader(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CompensationFactoryCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CompensationFactory['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return CompensationFactoryClient.getIntegerState(state, 'contract_version')
      },
      get deploymentVersion() {
        return CompensationFactoryClient.getIntegerState(state, 'deployment_version')
      },
      get owner() {
        return CompensationFactoryClient.getBinaryState(state, 'owner')
      },
      get updatable() {
        return CompensationFactoryClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return CompensationFactoryClient.getBinaryState(state, 'upgrader')
      },
    }
  }

  public compose(): CompensationFactoryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      create(args: MethodArgs<'create(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.create(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CompensationFactoryComposer
  }
}
export type CompensationFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create(address)uint64 ABI method.
   *
   * Create compensation contract.
Arguments: - owner, who is the beneficiary - period, vesting period
Returns: - app id
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(args: MethodArgs<'create(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, MethodReturn<'create(address)uint64'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the CompensationFactory smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompensationFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CompensationFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CompensationFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CompensationFactoryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CompensationFactoryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CompensationFactoryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CompensationFactoryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
