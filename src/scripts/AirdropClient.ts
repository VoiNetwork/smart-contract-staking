/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "abort_funding()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "preconfigure(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_vesting_delay(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_total(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_distribution_count(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setup(address,address,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "configure(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "close()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fill()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_funder(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_funding(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reduce_total(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzcmMuY29udHJhY3QuQWlyZHJvcC5hcHByb3ZhbF9wcm9ncmFtOgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2VudHJ5cG9pbnRAMgogICAgY2FsbHN1YiBfX2luaXRfXwoKbWFpbl9lbnRyeXBvaW50QDI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AyNAogICAgbWV0aG9kICJhYm9ydF9mdW5kaW5nKCl2b2lkIgogICAgbWV0aG9kICJwcmVjb25maWd1cmUodWludDY0LHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJzZXRfdmVzdGluZ19kZWxheSh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAic2V0X3RvdGFsKHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJzZXRfZGlzdHJpYnV0aW9uX2NvdW50KHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJzZXR1cChhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAiY29uZmlndXJlKHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJ3aXRoZHJhdyh1aW50NjQpdWludDY0IgogICAgbWV0aG9kICJjbG9zZSgpdm9pZCIKICAgIG1ldGhvZCAidHJhbnNmZXIoYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJmaWxsKCl2b2lkIgogICAgbWV0aG9kICJncmFudF9mdW5kZXIoYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJzZXRfZnVuZGluZyh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAicmVkdWNlX3RvdGFsKHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJzZXRfZGVsZWdhdGUoYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJwYXJ0aWNpcGF0ZShieXRlWzMyXSxieXRlWzMyXSx1aW50NjQsdWludDY0LHVpbnQ2NCxieXRlWzY0XSl2b2lkIgogICAgbWV0aG9kICJzZXRfdmVyc2lvbih1aW50NjQsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImFwcHJvdmVfdXBkYXRlKGJvb2wpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fYWJvcnRfZnVuZGluZ19yb3V0ZUA0IG1haW5fcHJlY29uZmlndXJlX3JvdXRlQDUgbWFpbl9zZXRfdmVzdGluZ19kZWxheV9yb3V0ZUA2IG1haW5fc2V0X3RvdGFsX3JvdXRlQDcgbWFpbl9zZXRfZGlzdHJpYnV0aW9uX2NvdW50X3JvdXRlQDggbWFpbl9zZXR1cF9yb3V0ZUA5IG1haW5fY29uZmlndXJlX3JvdXRlQDEwIG1haW5fd2l0aGRyYXdfcm91dGVAMTEgbWFpbl9jbG9zZV9yb3V0ZUAxMiBtYWluX3RyYW5zZmVyX3JvdXRlQDEzIG1haW5fZmlsbF9yb3V0ZUAxNCBtYWluX2dyYW50X2Z1bmRlcl9yb3V0ZUAxNSBtYWluX3NldF9mdW5kaW5nX3JvdXRlQDE2IG1haW5fcmVkdWNlX3RvdGFsX3JvdXRlQDE3IG1haW5fc2V0X2RlbGVnYXRlX3JvdXRlQDE4IG1haW5fcGFydGljaXBhdGVfcm91dGVAMTkgbWFpbl9zZXRfdmVyc2lvbl9yb3V0ZUAyMCBtYWluX2FwcHJvdmVfdXBkYXRlX3JvdXRlQDIxCiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX2Fib3J0X2Z1bmRpbmdfcm91dGVANDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODczLTg3NQogICAgLy8gIyBvdmVycmlkZSBmdW5kYWJsZSBhYm9ydF9mdW5kaW5nIGFiaW1ldGhvZAogICAgLy8gIyAgIGNsb3NlIG9mZmxpbmUgb24gZGVsZXRlIHRvIG93bmVyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnQgRGVsZXRlQXBwbGljYXRpb24KICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIERlbGV0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhYm9ydF9mdW5kaW5nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3ByZWNvbmZpZ3VyZV9yb3V0ZUA1OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1NzUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHByZWNvbmZpZ3VyZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRfdmVzdGluZ19kZWxheV9yb3V0ZUA2OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1ODkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU4OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF92ZXN0aW5nX2RlbGF5CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF90b3RhbF9yb3V0ZUA3OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MDIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF90b3RhbAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRfZGlzdHJpYnV0aW9uX2NvdW50X3JvdXRlQDg6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYxNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X2Rpc3RyaWJ1dGlvbl9jb3VudAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXR1cF9yb3V0ZUA5OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MjgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldHVwCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2NvbmZpZ3VyZV9yb3V0ZUAxMDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjQ3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBjb25maWd1cmUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fd2l0aGRyYXdfcm91dGVAMTE6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY2Mi02NzkKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHdpdGhkcmF3CiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhbW91bnQKICAgIC8vICMgcmV0dXJuczogbWluIGJhbGFuY2UKICAgIC8vICMgcHVycG9zZTogZXh0cmFjdCBmdW5kcyBmcm9tIGNvbnRyYWN0CiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyAtIGxldCBiYWxhbmNlIGJlIHRoZSBjdXJyZW50IGJhbGFuY2Ugb2YgdGhlCiAgICAvLyAjICAgY29udHJhY3QKICAgIC8vICMgLSBiYWxhbmNlIC0gYW1vdW50ID49IG1pbl9iYWxhbmNlCiAgICAvLyAjICAgKGZlZSBwYWlkIGluIGFwcGwgdHhuKQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdHJhbnNmZXIgYW1vdW50IGZyb20gdGhlIGNvbnRyYWN0IGFjY291bnQKICAgIC8vICMgICB0byBvd25lcgogICAgLy8gIyBub3RlczogY29zdHMgMiBmZWVzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NjItNjc5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiB3aXRoZHJhdwogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gYW1vdW50CiAgICAvLyAjIHJldHVybnM6IG1pbiBiYWxhbmNlCiAgICAvLyAjIHB1cnBvc2U6IGV4dHJhY3QgZnVuZHMgZnJvbSBjb250cmFjdAogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgb3duZXIKICAgIC8vICMgLSBsZXQgYmFsYW5jZSBiZSB0aGUgY3VycmVudCBiYWxhbmNlIG9mIHRoZQogICAgLy8gIyAgIGNvbnRyYWN0CiAgICAvLyAjIC0gYmFsYW5jZSAtIGFtb3VudCA+PSBtaW5fYmFsYW5jZQogICAgLy8gIyAgIChmZWUgcGFpZCBpbiBhcHBsIHR4bikKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIHRyYW5zZmVyIGFtb3VudCBmcm9tIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjICAgdG8gb3duZXIKICAgIC8vICMgbm90ZXM6IGNvc3RzIDIgZmVlcwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHdpdGhkcmF3CiAgICBpdG9iCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2Nsb3NlX3JvdXRlQDEyOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3MDItNzE0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBjbG9zZQogICAgLy8gIyBwdXJwb3NlOiBkZWxldGVzIGNvbnRyYWN0CiAgICAvLyAjIHByZS1jb25kaXRpb25zOgogICAgLy8gIyAtIG1pbiBiYWxhbmNlIGlzIDAKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIGNvbnRyYWN0IGlzIGRlbGV0ZWQKICAgIC8vICMgLSBhY2NvdW50IGNsb3NlZCBvdXQgdG8gb3duZXIgaWYgaXQgaGFzIGEgYmFsYW5jZQogICAgLy8gIyBub3RlczoKICAgIC8vICMgLSBzaG91bGQgYmUgYWxsZWQgd2l0aCBvbkNvbXBsZXRpb24KICAgIC8vICMgICBkZWxldGVBcHBsaWNhdGlvbgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uRGVsZXRlQXBwbGljYXRpb25dKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgaW50IERlbGV0ZUFwcGxpY2F0aW9uCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBEZWxldGVBcHBsaWNhdGlvbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY2xvc2UKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fdHJhbnNmZXJfcm91dGVAMTM6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHRyYW5zZmVyCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2ZpbGxfcm91dGVAMTQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjEzMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGZpbGwKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZ3JhbnRfZnVuZGVyX3JvdXRlQDE1OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGdyYW50X2Z1bmRlcgogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRfZnVuZGluZ19yb3V0ZUAxNjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTQ3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfZnVuZGluZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZWR1Y2VfdG90YWxfcm91dGVAMTc6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE2NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTY3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcmVkdWNlX3RvdGFsCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF9kZWxlZ2F0ZV9yb3V0ZUAxODoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMjYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRfZGVsZWdhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcGFydGljaXBhdGVfcm91dGVAMTk6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIzMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjMzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcGFydGljaXBhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fc2V0X3ZlcnNpb25fcm91dGVAMjA6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzQ4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X3ZlcnNpb24KICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYXBwcm92ZV91cGRhdGVfcm91dGVAMjE6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM2NS0zNzUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGFwcHJvdmVfdXBkYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhcHByb3ZhbCwgYXBwcm92YWwgc3RhdHVzCiAgICAvLyAjIHB1cnBvc2U6IGFwcHJvdmUgdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdXBkYXRhYmxlIHNldCB0byBhcHByb3ZhbAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzY1LTM3NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogYXBwcm92ZV91cGRhdGUKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGFwcHJvdmFsLCBhcHByb3ZhbCBzdGF0dXMKICAgIC8vICMgcHVycG9zZTogYXBwcm92ZSB1cGRhdGUKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSB1cGRhdGFibGUgc2V0IHRvIGFwcHJvdmFsCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYXBwcm92ZV91cGRhdGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDI0OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICBpbnQgMAogICAgaW50IDQKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIG1hdGNoIG1haW5fb25fY3JlYXRlQDI1IG1haW5fb25fdXBkYXRlQDI2CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX29uX2NyZWF0ZUAyNToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDExCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQxMS00MTIKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBvbl9jcmVhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgb25fY3JlYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX29uX3VwZGF0ZUAyNjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzU2CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzU2LTM1NwogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVsiVXBkYXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiBvbl91cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgb25fdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgoKLy8gc3JjLmNvbnRyYWN0LkFpcmRyb3AuYWJvcnRfZnVuZGluZygpIC0+IHZvaWQ6CmFib3J0X2Z1bmRpbmc6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg3My04NzYKICAgIC8vICMgb3ZlcnJpZGUgZnVuZGFibGUgYWJvcnRfZnVuZGluZyBhYmltZXRob2QKICAgIC8vICMgICBjbG9zZSBvZmZsaW5lIG9uIGRlbGV0ZSB0byBvd25lcgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uRGVsZXRlQXBwbGljYXRpb25dKQogICAgLy8gZGVmIGFib3J0X2Z1bmRpbmcoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NzkKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODc5CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyIG9yIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lcgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgID09CiAgICBibnogYWJvcnRfZnVuZGluZ19ib29sX3RydWVAMgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NzkKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYnogYWJvcnRfZnVuZGluZ19ib29sX2ZhbHNlQDMKCmFib3J0X2Z1bmRpbmdfYm9vbF90cnVlQDI6CiAgICBpbnQgMQogICAgYiBhYm9ydF9mdW5kaW5nX2Jvb2xfbWVyZ2VANAoKYWJvcnRfZnVuZGluZ19ib29sX2ZhbHNlQDM6CiAgICBpbnQgMAoKYWJvcnRfZnVuZGluZ19ib29sX21lcmdlQDQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg3Ny04ODAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyIG9yIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lcgogICAgLy8gKSwgIm11c3QgYmUgZnVuZGVyIG9yIG93bmVyIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyIG9yIG93bmVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg4MS04ODIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA9PSBVSW50NjQoMCkKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODgxLTg4MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODgzLTg4NAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBjbG9zZV9vZmZsaW5lX29uX2RlbGV0ZShzZWxmLm93bmVyKQogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4ODMtODg0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlKHNlbGYub3duZXIpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBjYWxsc3ViIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlCiAgICByZXRzdWIKCgovLyBzcmMudXRpbHMuY2xvc2Vfb2ZmbGluZV9vbl9kZWxldGUoY2xvc2VfcmVtYWluZGVyX3RvOiBieXRlcykgLT4gdm9pZDoKY2xvc2Vfb2ZmbGluZV9vbl9kZWxldGU6CiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjUwLTUyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlKGNsb3NlX3JlbWFpbmRlcl90bzogQWNjb3VudCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL3NyYy91dGlscy5weTo1MwogICAgLy8gb2NhID0gVHhuLm9uX2NvbXBsZXRpb24KICAgIHR4biBPbkNvbXBsZXRpb24KICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NTQKICAgIC8vIGlmIG9jYSA9PSBPbkNvbXBsZXRlQWN0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uOgogICAgaW50IERlbGV0ZUFwcGxpY2F0aW9uCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjcwCiAgICAvLyByZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjczCiAgICAvLyBhbW91bnQ9b3AuR2xvYmFsLm1pbl9iYWxhbmNlLAogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NzUKICAgIC8vIGl0eG4uc3VibWl0X3R4bnMoa2V5cmVnX3R4biwgcG10X3R4bikKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NjQtNjYKICAgIC8vIHN0YXRlX3Byb29mX2tleT1CeXRlcy5mcm9tX2Jhc2U2NCgKICAgIC8vICAgICAiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9PSIKICAgIC8vICksCiAgICBieXRlIGJhc2U2NCBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09CiAgICBpdHhuX2ZpZWxkIFN0YXRlUHJvb2ZQSwogICAgLy8gc3JjL3NyYy91dGlscy5weTo2MwogICAgLy8gdm90ZV9rZXlfZGlsdXRpb249VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjYyCiAgICAvLyB2b3RlX2xhc3Q9VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUxhc3QKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NjEKICAgIC8vIHZvdGVfZmlyc3Q9VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUZpcnN0CiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjU4LTYwCiAgICAvLyBzZWxlY3Rpb25fa2V5PUJ5dGVzLmZyb21fYmFzZTY0KAogICAgLy8gICAgICJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPSIKICAgIC8vICksCiAgICBieXRlIGJhc2U2NCBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPQogICAgaXR4bl9maWVsZCBTZWxlY3Rpb25QSwogICAgLy8gc3JjL3NyYy91dGlscy5weTo1NwogICAgLy8gdm90ZV9rZXk9Qnl0ZXMuZnJvbV9iYXNlNjQoIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9IiksCiAgICBieXRlIGJhc2U2NCBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPQogICAgaXR4bl9maWVsZCBWb3RlUEsKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NTYKICAgIC8vIG5vbl9wYXJ0aWNpcGF0aW9uPVRydWUsCiAgICBpbnQgMQogICAgaXR4bl9maWVsZCBOb25wYXJ0aWNpcGF0aW9uCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjU1CiAgICAvLyBrZXlyZWdfdHhuID0gaXR4bi5LZXlSZWdpc3RyYXRpb24oCiAgICBpbnQga2V5cmVnCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjY3CiAgICAvLyBmZWU9MCwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc3JjL3NyYy91dGlscy5weTo3NQogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhrZXlyZWdfdHhuLCBwbXRfdHhuKQogICAgaXR4bl9uZXh0CiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NjkKICAgIC8vIHBtdF90eG4gPSBpdHhuLlBheW1lbnQoCiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjcyCiAgICAvLyBmZWU9MCwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc3JjL3NyYy91dGlscy5weTo3NQogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhrZXlyZWdfdHhuLCBwbXRfdHhuKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5Mb2NrYWJsZS5wcmVjb25maWd1cmUocGVyaW9kOiBieXRlcywgZGVhZGxpbmU6IGJ5dGVzKSAtPiB2b2lkOgpwcmVjb25maWd1cmU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU3NS01NzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHByZWNvbmZpZ3VyZShzZWxmLCBwZXJpb2Q6IGFyYzQuVUludDY0LCBkZWFkbGluZTogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NTgwLTU4MQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1ODAtNTgxCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLm93bmVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJvd25lciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gb3duZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU4MgogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU4MgogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBmdW5kZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU4My01ODQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NTg1LTU4NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnBlcmlvZCA9IHBlcmlvZC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0NDEKICAgIC8vIHNlbGYucGVyaW9kID0gVUludDY0KCkgICMgMAogICAgYnl0ZSAicGVyaW9kIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1ODUtNTg2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYucGVyaW9kID0gcGVyaW9kLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NTg3CiAgICAvLyBzZWxmLmRlYWRsaW5lID0gZGVhZGxpbmUubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQzCiAgICAvLyBzZWxmLmRlYWRsaW5lID0gVUludDY0KCkgICMgMAogICAgYnl0ZSAiZGVhZGxpbmUiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU4NwogICAgLy8gc2VsZi5kZWFkbGluZSA9IGRlYWRsaW5lLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5Mb2NrYWJsZS5zZXRfdmVzdGluZ19kZWxheSh2ZXN0aW5nX2RlbGF5OiBieXRlcykgLT4gdm9pZDoKc2V0X3Zlc3RpbmdfZGVsYXk6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU4OS01OTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF92ZXN0aW5nX2RlbGF5KHNlbGYsIHZlc3RpbmdfZGVsYXk6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU5NC01OTUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NTk0LTU5NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG93bmVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1OTYKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIG5vdCBpbml0aWFsaXplZCIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1OTYKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gZnVuZGVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo1OTctNTk4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJtdXN0IGJlIGNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdG9yCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU5OS02MDAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gdmVzdGluZ19kZWxheS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0NDYKICAgIC8vIHNlbGYudmVzdGluZ19kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIlZFU1RJTkdfREVMQVkiKSAgIyBleCkgMTIKICAgIGJ5dGUgInZlc3RpbmdfZGVsYXkiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU5OS02MDAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gdmVzdGluZ19kZWxheS5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzcmMuY29udHJhY3QuTG9ja2FibGUuc2V0X3RvdGFsKGZ1bmRpbmc6IGJ5dGVzKSAtPiB2b2lkOgpzZXRfdG90YWw6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYwMi02MDMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF90b3RhbChzZWxmLCBmdW5kaW5nOiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MDctNjA4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLm93bmVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJvd25lciBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYwNy02MDgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBvd25lciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjA5CiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjA5CiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIGZ1bmRlciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjEwLTYxMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAibXVzdCBiZSBjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRvcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MTItNjEzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBmdW5kaW5nLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLnRvdGFsID0gVUludDY0KCkKICAgIGJ5dGUgInRvdGFsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MTItNjEzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBmdW5kaW5nLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5Mb2NrYWJsZS5zZXRfZGlzdHJpYnV0aW9uX2NvdW50KGRpc3RyaWJ1dGlvbl9jb3VudDogYnl0ZXMpIC0+IHZvaWQ6CnNldF9kaXN0cmlidXRpb25fY291bnQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYxNS02MTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF9kaXN0cmlidXRpb25fY291bnQoc2VsZiwgZGlzdHJpYnV0aW9uX2NvdW50OiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MjAtNjIxCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLm93bmVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJvd25lciBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYyMC02MjEKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBvd25lciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjIyCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjIyCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIGZ1bmRlciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjIzLTYyNAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAibXVzdCBiZSBjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRvcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MjUtNjI2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX2NvdW50ID0gZGlzdHJpYnV0aW9uX2NvdW50Lm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0OAogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fY291bnQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJESVNUUklCVVRJT05fQ09VTlQiKSAgIyBleCkgMTIKICAgIGJ5dGUgImRpc3RyaWJ1dGlvbl9jb3VudCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjI1LTYyNgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCA9IGRpc3RyaWJ1dGlvbl9jb3VudC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzcmMuY29udHJhY3QuTG9ja2FibGUuc2V0dXAoZGVwbG95ZXI6IGJ5dGVzLCBvd25lcjogYnl0ZXMsIGZ1bmRlcjogYnl0ZXMsIGluaXRpYWw6IGJ5dGVzKSAtPiB2b2lkOgpzZXR1cDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjI4LTYzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0dXAoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBkZXBsb3llcjogYXJjNC5BZGRyZXNzLAogICAgLy8gICAgIG93bmVyOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgICAgZnVuZGVyOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgICAgaW5pdGlhbDogYXJjNC5VSW50NjQsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA0IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjM2LTYzNwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2MzYtNjM3CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLm93bmVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJvd25lciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gb3duZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYzOAogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYzOAogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBmdW5kZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjYzOS02NDAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Mzk3CiAgICAvLyBzZWxmLmRlcGxveWVyID0gQWNjb3VudCgpCiAgICBieXRlICJkZXBsb3llciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjQxLTY0MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLmRlcGxveWVyID0gZGVwbG95ZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjQzCiAgICAvLyBzZWxmLm93bmVyID0gb3duZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NDQKICAgIC8vIHNlbGYuZnVuZGVyID0gZnVuZGVyLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NDUKICAgIC8vIHNlbGYuaW5pdGlhbCA9IGluaXRpYWwubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQyCiAgICAvLyBzZWxmLmluaXRpYWwgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJpbml0aWFsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NDUKICAgIC8vIHNlbGYuaW5pdGlhbCA9IGluaXRpYWwubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LkxvY2thYmxlLmNvbmZpZ3VyZShwZXJpb2Q6IGJ5dGVzKSAtPiB2b2lkOgpjb25maWd1cmU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0Ny02NDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGNvbmZpZ3VyZShzZWxmLCBwZXJpb2Q6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0OS02NTAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA9PSAwLCAiZnVuZGluZyBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY0OS02NTAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA9PSAwLCAiZnVuZGluZyBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBmdW5kaW5nIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTEKICAgIC8vIGFzc2VydCBzZWxmLnRvdGFsID09IDAsICJ0b3RhbCBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjUxCiAgICAvLyBhc3NlcnQgc2VsZi50b3RhbCA9PSAwLCAidG90YWwgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIHRvdGFsIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTItNjUzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTItNjUzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIG93bmVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY1NC02NTUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHBlcmlvZCA8PSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfTElNSVQiKQogICAgaW50IFRNUExfUEVSSU9EX0xJTUlUCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGI+PQogICAgYXNzZXJ0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY1NgogICAgLy8gYXNzZXJ0IHBlcmlvZCA+PSAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBiPj0KICAgIGFzc2VydAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTctNjU4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmRlYWRsaW5lID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAsICJkZWFkbGluZSBub3QgcGFzc2VkIgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQzCiAgICAvLyBzZWxmLmRlYWRsaW5lID0gVUludDY0KCkgICMgMAogICAgYnl0ZSAiZGVhZGxpbmUiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY1Ny02NTgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZGVhZGxpbmUgPiBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCwgImRlYWRsaW5lIG5vdCBwYXNzZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVhZGxpbmUgZXhpc3RzCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICA+CiAgICBhc3NlcnQgLy8gZGVhZGxpbmUgbm90IHBhc3NlZAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NTktNjYwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYucGVyaW9kID0gcGVyaW9kLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY1OS02NjAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5wZXJpb2QgPSBwZXJpb2QubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LkxvY2thYmxlLndpdGhkcmF3KGFtb3VudDogYnl0ZXMpIC0+IHVpbnQ2NDoKd2l0aGRyYXc6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY2Mi02ODAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IHdpdGhkcmF3CiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhbW91bnQKICAgIC8vICMgcmV0dXJuczogbWluIGJhbGFuY2UKICAgIC8vICMgcHVycG9zZTogZXh0cmFjdCBmdW5kcyBmcm9tIGNvbnRyYWN0CiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyAtIGxldCBiYWxhbmNlIGJlIHRoZSBjdXJyZW50IGJhbGFuY2Ugb2YgdGhlCiAgICAvLyAjICAgY29udHJhY3QKICAgIC8vICMgLSBiYWxhbmNlIC0gYW1vdW50ID49IG1pbl9iYWxhbmNlCiAgICAvLyAjICAgKGZlZSBwYWlkIGluIGFwcGwgdHhuKQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdHJhbnNmZXIgYW1vdW50IGZyb20gdGhlIGNvbnRyYWN0IGFjY291bnQKICAgIC8vICMgICB0byBvd25lcgogICAgLy8gIyBub3RlczogY29zdHMgMiBmZWVzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiB3aXRoZHJhdyhzZWxmLCBhbW91bnQ6IGFyYzQuVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIGJ5dGUgIiIKICAgIGR1cG4gMgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODQtNjg1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODQtNjg1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIG93bmVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY4Ni02ODcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gaWYgc2VsZi5mdW5kaW5nID4gMDoKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6Njg2LTY4NwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBpZiBzZWxmLmZ1bmRpbmcgPiAwOgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICBieiB3aXRoZHJhd19lbHNlX2JvZHlANQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2ODgKICAgIC8vIG1pbl9iYWxhbmNlID0gc2VsZi5jYWxjdWxhdGVfbWluX2JhbGFuY2UoKQogICAgY2FsbHN1YiBjYWxjdWxhdGVfbWluX2JhbGFuY2UKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY4OQogICAgLy8gYXZhaWxhYmxlX2JhbGFuY2UgPSBnZXRfYXZhaWxhYmxlX2JhbGFuY2UoKQogICAgY2FsbHN1YiBnZXRfYXZhaWxhYmxlX2JhbGFuY2UKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjkwCiAgICAvLyBhc3NlcnQgYXZhaWxhYmxlX2JhbGFuY2UgLSBhbW91bnQubmF0aXZlID49IG1pbl9iYWxhbmNlLCAiYmFsYW5jZSBhdmFpbGFibGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAtCiAgICA8PQogICAgYXNzZXJ0IC8vIGJhbGFuY2UgYXZhaWxhYmxlCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5MQogICAgLy8gaWYgYW1vdW50ID4gMDoKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGI+CiAgICBieiB3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjkyCiAgICAvLyBpdHhuLlBheW1lbnQoYW1vdW50PWFtb3VudC5uYXRpdmUsIHJlY2VpdmVyPVR4bi5zZW5kZXIsIGZlZT0wKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgdHhuIFNlbmRlcgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgZnJhbWVfZGlnIDEKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0Cgp3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5MwogICAgLy8gcmV0dXJuIG1pbl9iYWxhbmNlCiAgICByZXRzdWIKCndpdGhkcmF3X2Vsc2VfYm9keUA1OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2OTUKICAgIC8vIG1pbl9iYWxhbmNlID0gc2VsZi50b3RhbAogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5NQogICAgLy8gbWluX2JhbGFuY2UgPSBzZWxmLnRvdGFsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBmcmFtZV9idXJ5IDAKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsIGV4aXN0cwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2OTYKICAgIC8vIGF2YWlsYWJsZV9iYWxhbmNlID0gZ2V0X2F2YWlsYWJsZV9iYWxhbmNlKCkKICAgIGNhbGxzdWIgZ2V0X2F2YWlsYWJsZV9iYWxhbmNlCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5NwogICAgLy8gYXNzZXJ0IGF2YWlsYWJsZV9iYWxhbmNlIC0gYW1vdW50Lm5hdGl2ZSA+PSBtaW5fYmFsYW5jZSwgImJhbGFuY2UgYXZhaWxhYmxlIgogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgLQogICAgPD0KICAgIGFzc2VydCAvLyBiYWxhbmNlIGF2YWlsYWJsZQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2OTgKICAgIC8vIGlmIGFtb3VudCA+IDA6CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBiPgogICAgYnogd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUA4CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjY5OQogICAgLy8gaXR4bi5QYXltZW50KGFtb3VudD1hbW91bnQubmF0aXZlLCByZWNlaXZlcj1UeG4uc2VuZGVyLCBmZWU9MCkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAyCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaW50IHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAoKd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUA4OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3MDAKICAgIC8vIHJldHVybiBtaW5fYmFsYW5jZQogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LkxvY2thYmxlLmNhbGN1bGF0ZV9taW5fYmFsYW5jZSgpIC0+IHVpbnQ2NDoKY2FsY3VsYXRlX21pbl9iYWxhbmNlOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3MjctNzQyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBtaW5fYmFsYW5jZSAoaW50ZXJuYWwpCiAgICAvLyAjIGFyZ3VtZW50czogTm9uZQogICAgLy8gIyBwdXJwb3NlOiBjYWxjdWFsdGUgbWluaW11bSBiYWxhbmNlCiAgICAvLyAjIHByZS1jb25kaXRpb25zOiBOb25lCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyBub3RlczoKICAgIC8vICMgLSBsZXQgcGVyaW9kID0gbnVtYmVyIG9mIG1vbnRocyB0byB0byBsb2NrdXAKICAgIC8vICMgICAgICAgdG90YWwgPSB0b3RhbCBhbW91bnQgaW50aWFsbHkgZnVuZGVkIChhaXJkcm9wICsgbG9ja3VwIGJvbnVzKQogICAgLy8gIyAgICAgICB5ID0gdmVzdGluZyBkZWxheSBpbiBtb250aHMKICAgIC8vICMgICAgICAgcCA9IDEgLyAoc2VsZi5wZXJpb2QgeCAxMikgb3IgMSAvIChwZXJpb2QpCiAgICAvLyAjIC0gbWltdW11bSBiYWxhbmNlID0KICAgIC8vICMgICAgIHRvdGFsIHggbWluKDEsIHAgeCBtYXgoMCwgKHBlcmlvZCAtIChub3coKSAtIGZ1bmRpbmcgKyB5IHggc2Vjb25kcy1pbi1tb250aCkpIC8gc2Vjb25kcy1pbi1tb250aCkpCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGN1bGF0ZV9taW5fYmFsYW5jZShzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzQzCiAgICAvLyBub3c6IFVJbnQ2NCA9IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc0NgogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5LAogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQ2CiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVNUSU5HX0RFTEFZIikgICMgZXgpIDEyCiAgICBieXRlICJ2ZXN0aW5nX2RlbGF5IgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3NDYKICAgIC8vIHNlbGYudmVzdGluZ19kZWxheSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52ZXN0aW5nX2RlbGF5IGV4aXN0cwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3NDcKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMsCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0NDQKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfU0VDT05EUyIpICAjIGV4KSAyNTkyMDAwCiAgICBieXRlICJwZXJpb2Rfc2Vjb25kcyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzQ3CiAgICAvLyBzZWxmLnBlcmlvZF9zZWNvbmRzLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBlcmlvZF9zZWNvbmRzIGV4aXN0cwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3NDgKICAgIC8vIHNlbGYubG9ja3VwX2RlbGF5LAogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQ1CiAgICAvLyBzZWxmLmxvY2t1cF9kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkxPQ0tVUF9ERUxBWSIpICAjIGV4KSAxMgogICAgYnl0ZSAibG9ja3VwX2RlbGF5IgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3NDgKICAgIC8vIHNlbGYubG9ja3VwX2RlbGF5LAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxvY2t1cF9kZWxheSBleGlzdHMKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzQ5CiAgICAvLyBzZWxmLnBlcmlvZCwKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc0OQogICAgLy8gc2VsZi5wZXJpb2QsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGVyaW9kIGV4aXN0cwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3NTAKICAgIC8vIHNlbGYuZnVuZGluZywKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzUwCiAgICAvLyBzZWxmLmZ1bmRpbmcsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzUxCiAgICAvLyBzZWxmLnRvdGFsLAogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc1MQogICAgLy8gc2VsZi50b3RhbCwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbCBleGlzdHMKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzUyCiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCwKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0OAogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fY291bnQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJESVNUUklCVVRJT05fQ09VTlQiKSAgIyBleCkgMTIKICAgIGJ5dGUgImRpc3RyaWJ1dGlvbl9jb3VudCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzUyCiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kaXN0cmlidXRpb25fY291bnQgZXhpc3RzCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc1MwogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fc2Vjb25kcywKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0OQogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fc2Vjb25kcyA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oCiAgICBieXRlICJkaXN0cmlidXRpb25fc2Vjb25kcyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzUzCiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9zZWNvbmRzLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRpc3RyaWJ1dGlvbl9zZWNvbmRzIGV4aXN0cwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3NDQtNzU0CiAgICAvLyBtaW5fYmFsYW5jZTogVUludDY0ID0gY2FsY3VsYXRlX21hYl9wdXJlKAogICAgLy8gICAgIG5vdywKICAgIC8vICAgICBzZWxmLnZlc3RpbmdfZGVsYXksCiAgICAvLyAgICAgc2VsZi5wZXJpb2Rfc2Vjb25kcywKICAgIC8vICAgICBzZWxmLmxvY2t1cF9kZWxheSwKICAgIC8vICAgICBzZWxmLnBlcmlvZCwKICAgIC8vICAgICBzZWxmLmZ1bmRpbmcsCiAgICAvLyAgICAgc2VsZi50b3RhbCwKICAgIC8vICAgICBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCwKICAgIC8vICAgICBzZWxmLmRpc3RyaWJ1dGlvbl9zZWNvbmRzLAogICAgLy8gKQogICAgY2FsbHN1YiBjYWxjdWxhdGVfbWFiX3B1cmUKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzU1CiAgICAvLyByZXR1cm4gbWluX2JhbGFuY2UKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdF9tYWIuY2FsY3VsYXRlX21hYl9wdXJlKG5vdzogdWludDY0LCB2ZXN0aW5nX2RlbGF5OiB1aW50NjQsIHBlcmlvZF9zZWNvbmRzOiB1aW50NjQsIGxvY2t1cF9kZWxheTogdWludDY0LCBwZXJpb2Q6IHVpbnQ2NCwgZnVuZGluZzogdWludDY0LCB0b3RhbDogdWludDY0LCBkaXN0cmlidXRpb25fY291bnQ6IHVpbnQ2NCwgZGlzdHJpYnV0aW9uX3NlY29uZHM6IHVpbnQ2NCkgLT4gdWludDY0OgpjYWxjdWxhdGVfbWFiX3B1cmU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTo0LTMwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBjYWxjdWxhdGVfbWFiX3B1cmUgKGludGVybmFsKQogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gbm93LCB0aW1lc3RhbXAKICAgIC8vICMgLSB2ZXN0aW5nX2RlbGF5LCBob3cgbWFueSBwZXJpb2RzIGluIHZlc3RpbmcKICAgIC8vICMgLSBwZXJpb2Rfc2Vjb25kcywgaG93IG1hbnkgc2Vjb25kcyBpbiBwZXJpb2QKICAgIC8vICMgLSBsb2NrdXAgZGVsYXksIGhvdyBtYW55IHBlcmlvZCBpbiBsb2NrdXAKICAgIC8vICMgLSBwZXJpb2QsIGhvdyBtYW55IHBlcmlvZHMKICAgIC8vICMgLSBmdW5kaW5nLCB3aGVuIGZ1bmRlZAogICAgLy8gIyAtIHRvdGFsLCBob3cgbXVjaCBmdW5kZWQKICAgIC8vICMgLSBkaXN0cmlidXRpb25fY291bnQsIGhvdyBtYW55IHBlcmlvZHMgaW4gZGlzdHJpYnV0aW9uCiAgICAvLyAjIC0gZGlzdHJpYnV0aW9uX3NlY29uZHMsIGhvdyBtYW55IHNlY29uZHMgaW4gZGlzdHJpYnV0aW9uCiAgICAvLyAjIHB1cnBvc2U6IGNhbGN1bGF0ZSBtaW5pbXVtIGFsbG93YWJsZSBiYWxhbmNlCiAgICAvLyAjIHJldHVybnMnIG1pbmltdW0gYWxsb3dhYmxlIGJhbGFuY2UKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY2FsY3VsYXRlX21hYl9wdXJlKAogICAgLy8gICAgIG5vdzogVUludDY0LAogICAgLy8gICAgIHZlc3RpbmdfZGVsYXk6IFVJbnQ2NCwKICAgIC8vICAgICBwZXJpb2Rfc2Vjb25kczogVUludDY0LAogICAgLy8gICAgIGxvY2t1cF9kZWxheTogVUludDY0LAogICAgLy8gICAgIHBlcmlvZDogVUludDY0LAogICAgLy8gICAgIGZ1bmRpbmc6IFVJbnQ2NCwKICAgIC8vICAgICB0b3RhbDogVUludDY0LAogICAgLy8gICAgIGRpc3RyaWJ1dGlvbl9jb3VudDogVUludDY0LAogICAgLy8gICAgIGRpc3RyaWJ1dGlvbl9zZWNvbmRzOiBVSW50NjQsCiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDkgMQogICAgYnl0ZSAiIgogICAgLy8gc3JjL3NyYy9jb250cmFjdF9tYWIucHk6MzEKICAgIC8vIGxvY2t1cF9wZXJpb2RzID0gbG9ja3VwX2RlbGF5ICogcGVyaW9kCiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNQogICAgKgogICAgLy8gc3JjL3NyYy9jb250cmFjdF9tYWIucHk6MzIKICAgIC8vIGxvY2t1cF9zZWNvbmRzID0gbG9ja3VwX3BlcmlvZHMgKiBwZXJpb2Rfc2Vjb25kcwogICAgZnJhbWVfZGlnIC03CiAgICAqCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTozMwogICAgLy8gdmVzdGluZ19zZWNvbmRzID0gdmVzdGluZ19kZWxheSAqIHBlcmlvZF9zZWNvbmRzCiAgICBmcmFtZV9kaWcgLTgKICAgIGZyYW1lX2RpZyAtNwogICAgKgogICAgLy8gc3JjL3NyYy9jb250cmFjdF9tYWIucHk6MzQKICAgIC8vIGZ1bGx5X3Zlc3RlZCA9IGZ1bmRpbmcgKyB2ZXN0aW5nX3NlY29uZHMgKyBsb2NrdXBfc2Vjb25kcwogICAgZnJhbWVfZGlnIC00CiAgICArCiAgICArCiAgICBkdXAKICAgIC8vIHNyYy9zcmMvY29udHJhY3RfbWFiLnB5OjM1CiAgICAvLyBsb2NrZWRfdXAgPSBub3cgPD0gZnVsbHlfdmVzdGVkCiAgICBmcmFtZV9kaWcgLTkKICAgID49CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTozNgogICAgLy8gaWYgbG9ja2VkX3VwOgogICAgYnogY2FsY3VsYXRlX21hYl9wdXJlX2Vsc2VfYm9keUAyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTozNwogICAgLy8gcmV0dXJuIHRvdGFsCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpjYWxjdWxhdGVfbWFiX3B1cmVfZWxzZV9ib2R5QDI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTozOQogICAgLy8gZWxhcHNlZF9wZXJpb2RzID0gKG5vdyAtIGZ1bGx5X3Zlc3RlZCkgLy8gZGlzdHJpYnV0aW9uX3NlY29uZHMKICAgIGZyYW1lX2RpZyAtOQogICAgZnJhbWVfZGlnIDEKICAgIC0KICAgIGZyYW1lX2RpZyAtMQogICAgLwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3RfbWFiLnB5OjQwCiAgICAvLyBpZiBlbGFwc2VkX3BlcmlvZHMgPD0gZGlzdHJpYnV0aW9uX2NvdW50OgogICAgZnJhbWVfZGlnIC0yCiAgICA8PQogICAgYnogY2FsY3VsYXRlX21hYl9wdXJlX2Vsc2VfYm9keUA0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTo0MgogICAgLy8gdG90YWwgKiAoZGlzdHJpYnV0aW9uX2NvdW50IC0gZWxhcHNlZF9wZXJpb2RzKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMAogICAgLQogICAgZnJhbWVfZGlnIC0zCiAgICAqCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0X21hYi5weTo0MS00MwogICAgLy8gcmV0dXJuICgKICAgIC8vICAgICB0b3RhbCAqIChkaXN0cmlidXRpb25fY291bnQgLSBlbGFwc2VkX3BlcmlvZHMpCiAgICAvLyApIC8vIGRpc3RyaWJ1dGlvbl9jb3VudAogICAgZnJhbWVfZGlnIC0yCiAgICAvCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKY2FsY3VsYXRlX21hYl9wdXJlX2Vsc2VfYm9keUA0OgogICAgLy8gc3JjL3NyYy9jb250cmFjdF9tYWIucHk6NDUKICAgIC8vIHJldHVybiBVSW50NjQoMCkKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNyYy51dGlscy5nZXRfYXZhaWxhYmxlX2JhbGFuY2UoKSAtPiB1aW50NjQ6CmdldF9hdmFpbGFibGVfYmFsYW5jZToKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MzctNDMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGdldF9hdmFpbGFibGVfYmFsYW5jZSAoaW50ZXJuYWwpCiAgICAvLyAjIHB1cnBvc2U6IGdldCBhdmFpbGFibGUgYmFsYW5jZQogICAgLy8gIyByZXR1cm5zOiBhcHAgYmFsYW5jZSBhdmFpbGFibGUgZm9yIHNwZW5kaW5nCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGdldF9hdmFpbGFibGVfYmFsYW5jZSgpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gc3JjL3NyYy91dGlscy5weTo0NAogICAgLy8gYmFsYW5jZSA9IG9wLmJhbGFuY2UoR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcykKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBiYWxhbmNlCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjQ1CiAgICAvLyBtaW5fYmFsYW5jZSA9IG9wLkdsb2JhbC5taW5fYmFsYW5jZQogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6NDYKICAgIC8vIGF2YWlsYWJsZV9iYWxhbmNlID0gYmFsYW5jZSAtIG1pbl9iYWxhbmNlCiAgICAtCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjQ3CiAgICAvLyByZXR1cm4gYXZhaWxhYmxlX2JhbGFuY2UKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5Mb2NrYWJsZS5jbG9zZSgpIC0+IHZvaWQ6CmNsb3NlOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3MDItNzE1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBjbG9zZQogICAgLy8gIyBwdXJwb3NlOiBkZWxldGVzIGNvbnRyYWN0CiAgICAvLyAjIHByZS1jb25kaXRpb25zOgogICAgLy8gIyAtIG1pbiBiYWxhbmNlIGlzIDAKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIGNvbnRyYWN0IGlzIGRlbGV0ZWQKICAgIC8vICMgLSBhY2NvdW50IGNsb3NlZCBvdXQgdG8gb3duZXIgaWYgaXQgaGFzIGEgYmFsYW5jZQogICAgLy8gIyBub3RlczoKICAgIC8vICMgLSBzaG91bGQgYmUgYWxsZWQgd2l0aCBvbkNvbXBsZXRpb24KICAgIC8vICMgICBkZWxldGVBcHBsaWNhdGlvbgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uRGVsZXRlQXBwbGljYXRpb25dKQogICAgLy8gZGVmIGNsb3NlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzE2LTcxNwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA+IDAsICJmdW5kZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjcxNi03MTcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRpbmcgPiAwLCAiZnVuZGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICBhc3NlcnQgLy8gZnVuZGVkCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjcxOC03MTkKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmNhbGN1bGF0ZV9taW5fYmFsYW5jZSgpID09IDAsICJtaW4gYmFsYW5jZSBub3QgemVybyIKICAgIGNhbGxzdWIgY2FsY3VsYXRlX21pbl9iYWxhbmNlCiAgICAhCiAgICBhc3NlcnQgLy8gbWluIGJhbGFuY2Ugbm90IHplcm8KICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzIyCiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlcgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3MjIKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYm56IGNsb3NlX2Jvb2xfdHJ1ZUAyCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzIyCiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlcgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgID09CiAgICBieiBjbG9zZV9ib29sX2ZhbHNlQDMKCmNsb3NlX2Jvb2xfdHJ1ZUAyOgogICAgaW50IDEKICAgIGIgY2xvc2VfYm9vbF9tZXJnZUA0CgpjbG9zZV9ib29sX2ZhbHNlQDM6CiAgICBpbnQgMAoKY2xvc2VfYm9vbF9tZXJnZUA0OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo3MjAtNzIzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyCiAgICAvLyApLCAibXVzdCBiZSBvd25lciBvciBmdW5kZXIiCiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lciBvciBmdW5kZXIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzI0LTcyNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xvc2Vfb2ZmbGluZV9vbl9kZWxldGUoc2VsZi5vd25lcikKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NzI0LTcyNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xvc2Vfb2ZmbGluZV9vbl9kZWxldGUoc2VsZi5vd25lcikKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgIGNhbGxzdWIgY2xvc2Vfb2ZmbGluZV9vbl9kZWxldGUKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5Pd25hYmxlLnRyYW5zZmVyKG5ld19vd25lcjogYnl0ZXMpIC0+IHZvaWQ6CnRyYW5zZmVyOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2My02NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgdHJhbnNmZXIoc2VsZiwgbmV3X293bmVyOiBhcmM0LkFkZHJlc3MpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NjUKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciwgIm11c3QgYmUgb3duZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo2NgogICAgLy8gc2VsZi5vd25lciA9IG5ld19vd25lci5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5GdW5kYWJsZS5maWxsKCkgLT4gdm9pZDoKZmlsbDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTMwLTEzMQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZmlsbChzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjEzMi0xMzMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciwgIm11c3QgYmUgZnVuZGVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjEzMi0xMzMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciwgIm11c3QgYmUgZnVuZGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBmdW5kZXIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTM0LTEzNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHBheW1lbnRfYW1vdW50ID0gcmVxdWlyZV9wYXltZW50KHNlbGYuZnVuZGVyKQogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjEzNC0xMzUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBwYXltZW50X2Ftb3VudCA9IHJlcXVpcmVfcGF5bWVudChzZWxmLmZ1bmRlcikKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICBjYWxsc3ViIHJlcXVpcmVfcGF5bWVudAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxMzctMTM4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi50b3RhbCA9IHNlbGYudG90YWwgKyBwYXltZW50X2Ftb3VudAogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjEzNy0xMzgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnRvdGFsID0gc2VsZi50b3RhbCArIHBheW1lbnRfYW1vdW50CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWwgZXhpc3RzCiAgICArCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLnRvdGFsID0gVUludDY0KCkKICAgIGJ5dGUgInRvdGFsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxMzctMTM4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi50b3RhbCA9IHNlbGYudG90YWwgKyBwYXltZW50X2Ftb3VudAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNyYy51dGlscy5yZXF1aXJlX3BheW1lbnQod2hvOiBieXRlcykgLT4gdWludDY0OgpyZXF1aXJlX3BheW1lbnQ6CiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjE1LTIzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiByZXF1aXJlX3BheW1lbnQgKGludGVybmFsKQogICAgLy8gIyBhcmd1bWVudHM6IE5vbmUKICAgIC8vICMgcHVycG9zZTogY2hlY2sgcGF5bWVudAogICAgLy8gIyBwcmUtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6IE5vbmUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcmVxdWlyZV9wYXltZW50KHdobzogQWNjb3VudCkgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjI0CiAgICAvLyByZWZfZ3JvdXBfaW5kZXggPSBUeG4uZ3JvdXBfaW5kZXgKICAgIHR4biBHcm91cEluZGV4CiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjI1CiAgICAvLyBhc3NlcnQgcmVmX2dyb3VwX2luZGV4ID4gMCwgImdyb3VwIGluZGV4IGdyZWF0ZXIgdGhhbiB6ZXJvIgogICAgZHVwCiAgICBhc3NlcnQgLy8gZ3JvdXAgaW5kZXggZ3JlYXRlciB0aGFuIHplcm8KICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MjYKICAgIC8vIHBheW1lbnRfZ3JvdXBfaW5kZXggPSByZWZfZ3JvdXBfaW5kZXggLSAxCiAgICBpbnQgMQogICAgLQogICAgLy8gc3JjL3NyYy91dGlscy5weToyOAogICAgLy8gZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24ocGF5bWVudF9ncm91cF9pbmRleCkuc2VuZGVyID09IHdobwogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50IHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgZHVwCiAgICBndHhucyBTZW5kZXIKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MjctMjkKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24ocGF5bWVudF9ncm91cF9pbmRleCkuc2VuZGVyID09IHdobwogICAgLy8gKSwgInBheW1lbnQgc2VuZGVyIGFjY3VyYXRlIgogICAgYXNzZXJ0IC8vIHBheW1lbnQgc2VuZGVyIGFjY3VyYXRlCiAgICAvLyBzcmMvc3JjL3V0aWxzLnB5OjMxCiAgICAvLyBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlcgogICAgZHVwCiAgICBndHhucyBSZWNlaXZlcgogICAgLy8gc3JjL3NyYy91dGlscy5weTozMgogICAgLy8gPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MzEtMzIKICAgIC8vIGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKHBheW1lbnRfZ3JvdXBfaW5kZXgpLnJlY2VpdmVyCiAgICAvLyA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICA9PQogICAgLy8gc3JjL3NyYy91dGlscy5weTozMC0zMwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlcgogICAgLy8gICAgID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJwYXltZW50IHJlY2VpdmVyIGFjY3VyYXRlIgogICAgYXNzZXJ0IC8vIHBheW1lbnQgcmVjZWl2ZXIgYWNjdXJhdGUKICAgIC8vIHNyYy9zcmMvdXRpbHMucHk6MzQKICAgIC8vIHJldHVybiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5hbW91bnQKICAgIGd0eG5zIEFtb3VudAogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LkZ1bmRhYmxlLmdyYW50X2Z1bmRlcihmdW5kZXI6IGJ5dGVzKSAtPiB2b2lkOgpncmFudF9mdW5kZXI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE0MC0xNDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGdyYW50X2Z1bmRlcihzZWxmLCBmdW5kZXI6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDItMTQzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDItMTQzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDQtMTQ1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5mdW5kZXIgPSBmdW5kZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzcmMuY29udHJhY3QuRnVuZGFibGUuc2V0X2Z1bmRpbmcoZnVuZGluZzogYnl0ZXMpIC0+IHZvaWQ6CnNldF9mdW5kaW5nOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDctMTQ4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfZnVuZGluZyhzZWxmLCBmdW5kaW5nOiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDktMTUwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNDktMTUwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE1MwogICAgLy8gc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKSBvciBzZWxmLmZ1bmRpbmcgPiBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6OTAKICAgIC8vIHNlbGYuZnVuZGluZyA9IFVJbnQ2NCgpCiAgICBieXRlICJmdW5kaW5nIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNTMKICAgIC8vIHNlbGYuZnVuZGluZyA9PSBVSW50NjQoMCkgb3Igc2VsZi5mdW5kaW5nID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nIGV4aXN0cwogICAgYnogc2V0X2Z1bmRpbmdfYm9vbF90cnVlQDIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTUzCiAgICAvLyBzZWxmLmZ1bmRpbmcgPT0gVUludDY0KDApIG9yIHNlbGYuZnVuZGluZyA+IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgID4KICAgIGJ6IHNldF9mdW5kaW5nX2Jvb2xfZmFsc2VAMwoKc2V0X2Z1bmRpbmdfYm9vbF90cnVlQDI6CiAgICBpbnQgMQogICAgYiBzZXRfZnVuZGluZ19ib29sX21lcmdlQDQKCnNldF9mdW5kaW5nX2Jvb2xfZmFsc2VAMzoKICAgIGludCAwCgpzZXRfZnVuZGluZ19ib29sX21lcmdlQDQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE1MS0xNTQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHNlbGYuZnVuZGluZyA9PSBVSW50NjQoMCkgb3Igc2VsZi5mdW5kaW5nID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIC8vICksICJmdW5kaW5nIG5vdCBiZSBpbml0aWFsaXplZCBvciBjYW4gYmUgZXh0ZW5kZWQiCiAgICBhc3NlcnQgLy8gZnVuZGluZyBub3QgYmUgaW5pdGlhbGl6ZWQgb3IgY2FuIGJlIGV4dGVuZGVkCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE1NS0xNTYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBmdW5kaW5nLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTU1LTE1NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuZnVuZGluZyA9IGZ1bmRpbmcubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LkZ1bmRhYmxlLnJlZHVjZV90b3RhbChhZGp1c3RtZW50OiBieXRlcykgLT4gdm9pZDoKcmVkdWNlX3RvdGFsOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNjctMTY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiByZWR1Y2VfdG90YWwoc2VsZiwgYWRqdXN0bWVudDogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTY5LTE3MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyLCAibXVzdCBiZSBmdW5kZXIiCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTY5LTE3MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyLCAibXVzdCBiZSBmdW5kZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGZ1bmRlcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNzEtMTcyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA9PSBVSW50NjQoMCkKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTcxLTE3MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRpbmcgPT0gVUludDY0KDApCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgICEKICAgIGFzc2VydAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNzMtMTc0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IGFkanVzdG1lbnQgPD0gc2VsZi50b3RhbCwgImFkanVzdG1lbnQgYWNjdXJhdGUiCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTczLTE3NAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBhZGp1c3RtZW50IDw9IHNlbGYudG90YWwsICJhZGp1c3RtZW50IGFjY3VyYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsIGV4aXN0cwogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBiPj0KICAgIGFzc2VydCAvLyBhZGp1c3RtZW50IGFjY3VyYXRlCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE3NS0xNzYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnRvdGFsID0gc2VsZi50b3RhbCAtIGFkanVzdG1lbnQubmF0aXZlCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTc1LTE3NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBzZWxmLnRvdGFsIC0gYWRqdXN0bWVudC5uYXRpdmUKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbCBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTc1LTE3NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBzZWxmLnRvdGFsIC0gYWRqdXN0bWVudC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzcmMuY29udHJhY3QuU3Rha2VhYmxlLnNldF9kZWxlZ2F0ZShkZWxlZ2F0ZTogYnl0ZXMpIC0+IHZvaWQ6CnNldF9kZWxlZ2F0ZToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI2LTIyNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X2RlbGVnYXRlKHNlbGYsIGRlbGVnYXRlOiBhcmM0LkFkZHJlc3MpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI5CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIyOQogICAgLy8gVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyIG9yIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGJueiBzZXRfZGVsZWdhdGVfYm9vbF90cnVlQDIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGJ6IHNldF9kZWxlZ2F0ZV9ib29sX2ZhbHNlQDMKCnNldF9kZWxlZ2F0ZV9ib29sX3RydWVAMjoKICAgIGludCAxCiAgICBiIHNldF9kZWxlZ2F0ZV9ib29sX21lcmdlQDQKCnNldF9kZWxlZ2F0ZV9ib29sX2ZhbHNlQDM6CiAgICBpbnQgMAoKc2V0X2RlbGVnYXRlX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjI4LTIzMAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAibXVzdCBiZSBvd25lciBvciBjcmVhdG9yIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIgb3IgY3JlYXRvcgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxOTIKICAgIC8vIHNlbGYuZGVsZWdhdGUgPSBBY2NvdW50KCkKICAgIGJ5dGUgImRlbGVnYXRlIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzEKICAgIC8vIHNlbGYuZGVsZWdhdGUgPSBkZWxlZ2F0ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5TdGFrZWFibGUucGFydGljaXBhdGUodm90ZV9rOiBieXRlcywgc2VsX2s6IGJ5dGVzLCB2b3RlX2ZzdDogYnl0ZXMsIHZvdGVfbHN0OiBieXRlcywgdm90ZV9rZDogYnl0ZXMsIHNwX2tleTogYnl0ZXMpIC0+IHZvaWQ6CnBhcnRpY2lwYXRlOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMzMtMjQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBwYXJ0aWNpcGF0ZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHZvdGVfazogQnl0ZXMzMiwKICAgIC8vICAgICBzZWxfazogQnl0ZXMzMiwKICAgIC8vICAgICB2b3RlX2ZzdDogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgdm90ZV9sc3Q6IGFyYzQuVUludDY0LAogICAgLy8gICAgIHZvdGVfa2Q6IGFyYzQuVUludDY0LAogICAgLy8gICAgIHNwX2tleTogQnl0ZXM2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDYgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNDUKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQ1CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmRlbGVnYXRlCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYm56IHBhcnRpY2lwYXRlX2Jvb2xfdHJ1ZUAyCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxOTIKICAgIC8vIHNlbGYuZGVsZWdhdGUgPSBBY2NvdW50KCkKICAgIGJ5dGUgImRlbGVnYXRlIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNDUKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5kZWxlZ2F0ZSBleGlzdHMKICAgID09CiAgICBieiBwYXJ0aWNpcGF0ZV9ib29sX2ZhbHNlQDMKCnBhcnRpY2lwYXRlX2Jvb2xfdHJ1ZUAyOgogICAgaW50IDEKICAgIGIgcGFydGljaXBhdGVfYm9vbF9tZXJnZUA0CgpwYXJ0aWNpcGF0ZV9ib29sX2ZhbHNlQDM6CiAgICBpbnQgMAoKcGFydGljaXBhdGVfYm9vbF9tZXJnZUA0OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNDMtMjQ2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUKICAgIC8vICksICJtdXN0IGJlIG93bmVyIG9yIGRlbGVnYXRlIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIgb3IgZGVsZWdhdGUKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQ3LTI0OAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8ga2V5X3JlZ19mZWUgPSBHbG9iYWwubWluX3R4bl9mZWUKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQ5LTI1MAogICAgLy8gIyByZXF1aXJlIHBheW1lbnQgb2YgbWluIGZlZSB0byBwcmV2ZW50IGRyYWluaW5nCiAgICAvLyBhc3NlcnQgcmVxdWlyZV9wYXltZW50KFR4bi5zZW5kZXIpID09IGtleV9yZWdfZmVlLCAicGF5bWVudCBhbW91dCBhY2N1cmF0ZSIKICAgIHR4biBTZW5kZXIKICAgIGNhbGxzdWIgcmVxdWlyZV9wYXltZW50CiAgICBkaWcgMQogICAgPT0KICAgIGFzc2VydCAvLyBwYXltZW50IGFtb3V0IGFjY3VyYXRlCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI1MS0yNjAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGl0eG4uS2V5UmVnaXN0cmF0aW9uKAogICAgLy8gICAgIHZvdGVfa2V5PXZvdGVfay5ieXRlcywKICAgIC8vICAgICBzZWxlY3Rpb25fa2V5PXNlbF9rLmJ5dGVzLAogICAgLy8gICAgIHZvdGVfZmlyc3Q9dm90ZV9mc3QubmF0aXZlLAogICAgLy8gICAgIHZvdGVfbGFzdD12b3RlX2xzdC5uYXRpdmUsCiAgICAvLyAgICAgdm90ZV9rZXlfZGlsdXRpb249dm90ZV9rZC5uYXRpdmUsCiAgICAvLyAgICAgc3RhdGVfcHJvb2Zfa2V5PXNwX2tleS5ieXRlcywKICAgIC8vICAgICBmZWU9a2V5X3JlZ19mZWUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI1NQogICAgLy8gdm90ZV9maXJzdD12b3RlX2ZzdC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgLTQKICAgIGJ0b2kKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjU2CiAgICAvLyB2b3RlX2xhc3Q9dm90ZV9sc3QubmF0aXZlLAogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI1NwogICAgLy8gdm90ZV9rZXlfZGlsdXRpb249dm90ZV9rZC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBTdGF0ZVByb29mUEsKICAgIGl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCiAgICBpdHhuX2ZpZWxkIFZvdGVMYXN0CiAgICBpdHhuX2ZpZWxkIFZvdGVGaXJzdAogICAgZnJhbWVfZGlnIC01CiAgICBpdHhuX2ZpZWxkIFNlbGVjdGlvblBLCiAgICBmcmFtZV9kaWcgLTYKICAgIGl0eG5fZmllbGQgVm90ZVBLCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI1MS0yNTIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGl0eG4uS2V5UmVnaXN0cmF0aW9uKAogICAgaW50IGtleXJlZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjUxLTI2MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gaXR4bi5LZXlSZWdpc3RyYXRpb24oCiAgICAvLyAgICAgdm90ZV9rZXk9dm90ZV9rLmJ5dGVzLAogICAgLy8gICAgIHNlbGVjdGlvbl9rZXk9c2VsX2suYnl0ZXMsCiAgICAvLyAgICAgdm90ZV9maXJzdD12b3RlX2ZzdC5uYXRpdmUsCiAgICAvLyAgICAgdm90ZV9sYXN0PXZvdGVfbHN0Lm5hdGl2ZSwKICAgIC8vICAgICB2b3RlX2tleV9kaWx1dGlvbj12b3RlX2tkLm5hdGl2ZSwKICAgIC8vICAgICBzdGF0ZV9wcm9vZl9rZXk9c3Bfa2V5LmJ5dGVzLAogICAgLy8gICAgIGZlZT1rZXlfcmVnX2ZlZSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzcmMuY29udHJhY3QuVXBncmFkZWFibGUuc2V0X3ZlcnNpb24oY29udHJhY3RfdmVyc2lvbjogYnl0ZXMsIGRlcGxveW1lbnRfdmVyc2lvbjogYnl0ZXMpIC0+IHZvaWQ6CnNldF92ZXJzaW9uOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNDgtMzUxCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfdmVyc2lvbigKICAgIC8vICAgICBzZWxmLCBjb250cmFjdF92ZXJzaW9uOiBhcmM0LlVJbnQ2NCwgZGVwbG95bWVudF92ZXJzaW9uOiBhcmM0LlVJbnQ2NAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM1MgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzUzCiAgICAvLyBzZWxmLmNvbnRyYWN0X3ZlcnNpb24gPSBjb250cmFjdF92ZXJzaW9uLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMxMQogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gVUludDY0KCkKICAgIGJ5dGUgImNvbnRyYWN0X3ZlcnNpb24iCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM1MwogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gY29udHJhY3RfdmVyc2lvbi5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM1NAogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBkZXBsb3ltZW50X3ZlcnNpb24ubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzEyCiAgICAvLyBzZWxmLmRlcGxveW1lbnRfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBieXRlICJkZXBsb3ltZW50X3ZlcnNpb24iCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM1NAogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBkZXBsb3ltZW50X3ZlcnNpb24ubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LlVwZ3JhZGVhYmxlLmFwcHJvdmVfdXBkYXRlKGFwcHJvdmFsOiBieXRlcykgLT4gdm9pZDoKYXBwcm92ZV91cGRhdGU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM2NS0zNzYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGFwcHJvdmVfdXBkYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhcHByb3ZhbCwgYXBwcm92YWwgc3RhdHVzCiAgICAvLyAjIHB1cnBvc2U6IGFwcHJvdmUgdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdXBkYXRhYmxlIHNldCB0byBhcHByb3ZhbAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgYXBwcm92ZV91cGRhdGUoc2VsZiwgYXBwcm92YWw6IGFyYzQuQm9vbCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNzcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNzcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIG93bmVyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM3OAogICAgLy8gc2VsZi51cGRhdGFibGUgPSBhcHByb3ZhbC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGdldGJpdAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMTMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgYnl0ZSAidXBkYXRhYmxlIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNzgKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYXBwcm92YWwubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc3JjLmNvbnRyYWN0LkRlcGxveWFibGUub25fY3JlYXRlKCkgLT4gdm9pZDoKb25fY3JlYXRlOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0MTEtNDEyCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgb25fY3JlYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDEzCiAgICAvLyBjYWxsZXJfaWQgPSBHbG9iYWwuY2FsbGVyX2FwcGxpY2F0aW9uX2lkCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0MTQKICAgIC8vIGFzc2VydCBjYWxsZXJfaWQgPiAwLCAibXVzdCBiZSBjcmVhdGVkIGJ5IGZhY3RvcnkiCiAgICBkdXAKICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0ZWQgYnkgZmFjdG9yeQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozOTYKICAgIC8vIHNlbGYucGFyZW50X2lkID0gVUludDY0KCkKICAgIGJ5dGUgInBhcmVudF9pZCIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDE1CiAgICAvLyBzZWxmLnBhcmVudF9pZCA9IGNhbGxlcl9pZAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5VcGdyYWRlYWJsZS5vbl91cGRhdGUoKSAtPiB2b2lkOgpvbl91cGRhdGU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM1Ni0zNTcKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIlVwZGF0ZUFwcGxpY2F0aW9uIl0pCiAgICAvLyBkZWYgb25fdXBkYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MzU4LTM2MQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIFdBUk5JTkc6IFRoaXMgYXBwIGNhbiBiZSB1cGRhdGVkIGJ5IHRoZSBjcmVhdG9yCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJtdXN0IGJlIGNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdG9yCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM2MgogICAgLy8gYXNzZXJ0IHNlbGYudXBkYXRhYmxlID09IFVJbnQ2NCgxKSwgIm5vdCBhcHByb3ZlZCIKICAgIGludCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMxMwogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpCiAgICBieXRlICJ1cGRhdGFibGUiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM2MgogICAgLy8gYXNzZXJ0IHNlbGYudXBkYXRhYmxlID09IFVJbnQ2NCgxKSwgIm5vdCBhcHByb3ZlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi51cGRhdGFibGUgZXhpc3RzCiAgICBpbnQgMQogICAgPT0KICAgIGFzc2VydCAvLyBub3QgYXBwcm92ZWQKICAgIHJldHN1YgoKCi8vIHNyYy5jb250cmFjdC5BaXJkcm9wLl9faW5pdF9fKCkgLT4gdm9pZDoKX19pbml0X186CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg0MwogICAgLy8gZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6ICMgcHJhZ21hOiBubyBjb3ZlcgogICAgcHJvdG8gMCAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM5NgogICAgLy8gc2VsZi5wYXJlbnRfaWQgPSBVSW50NjQoKQogICAgYnl0ZSAicGFyZW50X2lkIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDQtODQ1CiAgICAvLyAjIGRlcGxveWFibGUgc3RhdGUKICAgIC8vIHNlbGYucGFyZW50X2lkID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozOTcKICAgIC8vIHNlbGYuZGVwbG95ZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImRlcGxveWVyIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDYKICAgIC8vIHNlbGYuZGVwbG95ZXIgPSBBY2NvdW50KCkKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTkyCiAgICAvLyBzZWxmLmRlbGVnYXRlID0gQWNjb3VudCgpCiAgICBieXRlICJkZWxlZ2F0ZSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQ3LTg0OAogICAgLy8gIyBzdGFrZWFibGUgc3RhdGUKICAgIC8vIHNlbGYuZGVsZWdhdGUgPSBBY2NvdW50KCkKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTkzCiAgICAvLyBzZWxmLnN0YWtlYWJsZSA9IGJvb2woMSkKICAgIGJ5dGUgInN0YWtlYWJsZSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODQ5CiAgICAvLyBzZWxmLnN0YWtlYWJsZSA9IGJvb2woMSkKICAgIGludCAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMTEKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IFVJbnQ2NCgpCiAgICBieXRlICJjb250cmFjdF92ZXJzaW9uIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NTAtODUxCiAgICAvLyAjIHVwZ3JhZGVhYmxlIHN0YXRlCiAgICAvLyBzZWxmLmNvbnRyYWN0X3ZlcnNpb24gPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMxMgogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKQogICAgYnl0ZSAiZGVwbG95bWVudF92ZXJzaW9uIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NTIKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMTMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgYnl0ZSAidXBkYXRhYmxlIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NTMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgaW50IDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODU0LTg1NQogICAgLy8gIyBvd25hYmxlIHN0YXRlCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg1Ni04NTcKICAgIC8vICMgbG9ja2FibGUgc3RhdGUKICAgIC8vIHNlbGYucGVyaW9kID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0NDIKICAgIC8vIHNlbGYuaW5pdGlhbCA9IFVJbnQ2NCgpICAjIDAKICAgIGJ5dGUgImluaXRpYWwiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg1OAogICAgLy8gc2VsZi5pbml0aWFsID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0NDMKICAgIC8vIHNlbGYuZGVhZGxpbmUgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJkZWFkbGluZSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODU5CiAgICAvLyBzZWxmLmRlYWRsaW5lID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0NDQKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfU0VDT05EUyIpICAjIGV4KSAyNTkyMDAwCiAgICBieXRlICJwZXJpb2Rfc2Vjb25kcyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODYwCiAgICAvLyBzZWxmLnBlcmlvZF9zZWNvbmRzID0gVGVtcGxhdGVWYXJbVUludDY0XSgiUEVSSU9EX1NFQ09ORFMiKQogICAgaW50IFRNUExfUEVSSU9EX1NFQ09ORFMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0NQogICAgLy8gc2VsZi5sb2NrdXBfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJMT0NLVVBfREVMQVkiKSAgIyBleCkgMTIKICAgIGJ5dGUgImxvY2t1cF9kZWxheSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODYxCiAgICAvLyBzZWxmLmxvY2t1cF9kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkxPQ0tVUF9ERUxBWSIpCiAgICBpbnQgVE1QTF9MT0NLVVBfREVMQVkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0NgogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiVkVTVElOR19ERUxBWSIpICAjIGV4KSAxMgogICAgYnl0ZSAidmVzdGluZ19kZWxheSIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODYyCiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVNUSU5HX0RFTEFZIikKICAgIGludCBUTVBMX1ZFU1RJTkdfREVMQVkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQ0NwogICAgLy8gc2VsZi5wZXJpb2RfbGltaXQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfTElNSVQiKSAgIyBleCkgNQogICAgYnl0ZSAicGVyaW9kX2xpbWl0IgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NjMKICAgIC8vIHNlbGYucGVyaW9kX2xpbWl0ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiUEVSSU9EX0xJTUlUIikKICAgIGludCBUTVBMX1BFUklPRF9MSU1JVAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQ4CiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkRJU1RSSUJVVElPTl9DT1VOVCIpICAjIGV4KSAxMgogICAgYnl0ZSAiZGlzdHJpYnV0aW9uX2NvdW50IgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NjQKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX2NvdW50ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiRElTVFJJQlVUSU9OX0NPVU5UIikKICAgIGludCBUTVBMX0RJU1RSSUJVVElPTl9DT1VOVAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6NDQ5CiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9zZWNvbmRzID0gVGVtcGxhdGVWYXJbVUludDY0XSgKICAgIGJ5dGUgImRpc3RyaWJ1dGlvbl9zZWNvbmRzIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NjUKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJESVNUUklCVVRJT05fU0VDT05EUyIpCiAgICBpbnQgVE1QTF9ESVNUUklCVVRJT05fU0VDT05EUwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojg2Ni04NjcKICAgIC8vICMgZnVuZGFibGUgc3RhdGUKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6ODY4CiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLnRvdGFsID0gVUludDY0KCkKICAgIGJ5dGUgInRvdGFsIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NjkKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5Ojc3MAogICAgLy8gc2VsZi5tZXNzZW5nZXJfaWQgPSBVSW50NjQoKQogICAgYnl0ZSAibWVzc2VuZ2VyX2lkIgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NzAtODcxCiAgICAvLyAjIHJlY2VpdmVyIHN0YXRlCiAgICAvLyBzZWxmLm1lc3Nlbmdlcl9pZCA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIk1FU1NFTkdFUl9JRCIpCiAgICBpbnQgVE1QTF9NRVNTRU5HRVJfSUQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIK",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzcmMuY29udHJhY3QuQWlyZHJvcC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 17
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deadline": {
          "type": "uint64",
          "key": "deadline"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployer": {
          "type": "bytes",
          "key": "deployer"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "distribution_count": {
          "type": "uint64",
          "key": "distribution_count"
        },
        "distribution_seconds": {
          "type": "uint64",
          "key": "distribution_seconds"
        },
        "funder": {
          "type": "bytes",
          "key": "funder"
        },
        "funding": {
          "type": "uint64",
          "key": "funding"
        },
        "initial": {
          "type": "uint64",
          "key": "initial"
        },
        "lockup_delay": {
          "type": "uint64",
          "key": "lockup_delay"
        },
        "messenger_id": {
          "type": "uint64",
          "key": "messenger_id"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "parent_id": {
          "type": "uint64",
          "key": "parent_id"
        },
        "period": {
          "type": "uint64",
          "key": "period"
        },
        "period_limit": {
          "type": "uint64",
          "key": "period_limit"
        },
        "period_seconds": {
          "type": "uint64",
          "key": "period_seconds"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "total": {
          "type": "uint64",
          "key": "total"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "vesting_delay": {
          "type": "uint64",
          "key": "vesting_delay"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Airdrop",
    "methods": [
      {
        "name": "abort_funding",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "preconfigure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          },
          {
            "type": "uint64",
            "name": "deadline"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Preconfigure lockup period and deadline."
      },
      {
        "name": "set_vesting_delay",
        "args": [
          {
            "type": "uint64",
            "name": "vesting_delay"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set vesting delay."
      },
      {
        "name": "set_total",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set total funding."
      },
      {
        "name": "set_distribution_count",
        "args": [
          {
            "type": "uint64",
            "name": "distribution_count"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set distribution count."
      },
      {
        "name": "setup",
        "args": [
          {
            "type": "address",
            "name": "deployer"
          },
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "funder"
          },
          {
            "type": "uint64",
            "name": "initial"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "configure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Withdraw funds from contract."
      },
      {
        "name": "close",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fill",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_funder",
        "args": [
          {
            "type": "address",
            "name": "funder"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_funding",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reduce_total",
        "args": [
          {
            "type": "uint64",
            "name": "adjustment"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Airdrop smart contract.
 */
export type Airdrop = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'abort_funding()void' | 'abort_funding', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'preconfigure(uint64,uint64)void' | 'preconfigure', {
      argsObj: {
        period: bigint | number
        deadline: bigint | number
      }
      argsTuple: [period: bigint | number, deadline: bigint | number]
      returns: void
    }>
    & Record<'set_vesting_delay(uint64)void' | 'set_vesting_delay', {
      argsObj: {
        vestingDelay: bigint | number
      }
      argsTuple: [vestingDelay: bigint | number]
      returns: void
    }>
    & Record<'set_total(uint64)void' | 'set_total', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
    & Record<'set_distribution_count(uint64)void' | 'set_distribution_count', {
      argsObj: {
        distributionCount: bigint | number
      }
      argsTuple: [distributionCount: bigint | number]
      returns: void
    }>
    & Record<'setup(address,address,address,uint64)void' | 'setup', {
      argsObj: {
        deployer: string
        owner: string
        funder: string
        initial: bigint | number
      }
      argsTuple: [deployer: string, owner: string, funder: string, initial: bigint | number]
      returns: void
    }>
    & Record<'configure(uint64)void' | 'configure', {
      argsObj: {
        period: bigint | number
      }
      argsTuple: [period: bigint | number]
      returns: void
    }>
    & Record<'withdraw(uint64)uint64' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'close()void' | 'close', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'fill()void' | 'fill', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'grant_funder(address)void' | 'grant_funder', {
      argsObj: {
        funder: string
      }
      argsTuple: [funder: string]
      returns: void
    }>
    & Record<'set_funding(uint64)void' | 'set_funding', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
    & Record<'reduce_total(uint64)void' | 'reduce_total', {
      argsObj: {
        adjustment: bigint | number
      }
      argsTuple: [adjustment: bigint | number]
      returns: void
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      deadline?: IntegerState
      delegate?: BinaryState
      deployer?: BinaryState
      deploymentVersion?: IntegerState
      distributionCount?: IntegerState
      distributionSeconds?: IntegerState
      funder?: BinaryState
      funding?: IntegerState
      initial?: IntegerState
      lockupDelay?: IntegerState
      messengerId?: IntegerState
      owner?: BinaryState
      parentId?: IntegerState
      period?: IntegerState
      periodLimit?: IntegerState
      periodSeconds?: IntegerState
      stakeable?: IntegerState
      total?: IntegerState
      updatable?: IntegerState
      vestingDelay?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AirdropSig = keyof Airdrop['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AirdropSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Airdrop smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AirdropSig> = Airdrop['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Airdrop smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AirdropSig> = Airdrop['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AirdropCreateCalls = (typeof AirdropCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AirdropCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AirdropUpdateCalls = (typeof AirdropCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AirdropUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AirdropDeleteCalls = (typeof AirdropCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AirdropDeleteCallParams =
  | TypedCallParams<'abort_funding()void'>
  | TypedCallParams<'close()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AirdropDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AirdropCreateCalls) => AirdropCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AirdropUpdateCalls) => AirdropUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AirdropDeleteCalls) => AirdropDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AirdropCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Airdrop smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Airdrop smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Airdrop smart contract using the abort_funding()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      abortFunding(args: MethodArgs<'abort_funding()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'abort_funding()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
      /**
       * Constructs a delete call for the Airdrop smart contract using the close()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'close()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the preconfigure(uint64,uint64)void ABI method
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'preconfigure(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period, args.deadline],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_vesting_delay(uint64)void ABI method
   *
   * Set vesting delay.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_vesting_delay(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.vestingDelay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_total(uint64)void ABI method
   *
   * Set total funding.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setTotal(args: MethodArgs<'set_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_total(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_distribution_count(uint64)void ABI method
   *
   * Set distribution count.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_distribution_count(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.distributionCount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setup(address,address,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setup(address,address,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.deployer, args.owner, args.funder, args.initial],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the configure(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'configure(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)uint64 ABI method
   *
   * Withdraw funds from contract.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fill()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fill()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_funder(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantFunder(args: MethodArgs<'grant_funder(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_funder(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_funding(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFunding(args: MethodArgs<'set_funding(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_funding(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reduce_total(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reduce_total(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.adjustment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Airdrop smart contract
 */
export class AirdropClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AirdropClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Airdrop['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Airdrop smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AirdropDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AirdropCallFactory.create)
    const updateArgs = params.updateCall?.(AirdropCallFactory.update)
    const deleteArgs = params.deleteCall?.(AirdropCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Airdrop smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Airdrop smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Airdrop smart contract using the abort_funding()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async abortFunding(args: MethodArgs<'abort_funding()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'abort_funding()void'>>(await $this.appClient.delete(AirdropCallFactory.delete.abortFunding(args, params)))
      },
      /**
       * Deletes an existing instance of the Airdrop smart contract using the close()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'close()void'>>(await $this.appClient.delete(AirdropCallFactory.delete.close(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Airdrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the preconfigure(uint64,uint64)void ABI method.
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.preconfigure(args, params))
  }

  /**
   * Calls the set_vesting_delay(uint64)void ABI method.
   *
   * Set vesting delay.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setVestingDelay(args, params))
  }

  /**
   * Calls the set_total(uint64)void ABI method.
   *
   * Set total funding.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setTotal(args: MethodArgs<'set_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setTotal(args, params))
  }

  /**
   * Calls the set_distribution_count(uint64)void ABI method.
   *
   * Set distribution count.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setDistributionCount(args, params))
  }

  /**
   * Calls the setup(address,address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setup(args, params))
  }

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.configure(args, params))
  }

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * Withdraw funds from contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.withdraw(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.transfer(args, params))
  }

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.fill(args, params))
  }

  /**
   * Calls the grant_funder(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantFunder(args: MethodArgs<'grant_funder(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.grantFunder(args, params))
  }

  /**
   * Calls the set_funding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFunding(args: MethodArgs<'set_funding(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setFunding(args, params))
  }

  /**
   * Calls the reduce_total(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.reduceTotal(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.participate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.approveUpdate(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Airdrop['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return AirdropClient.getIntegerState(state, 'contract_version')
      },
      get deadline() {
        return AirdropClient.getIntegerState(state, 'deadline')
      },
      get delegate() {
        return AirdropClient.getBinaryState(state, 'delegate')
      },
      get deployer() {
        return AirdropClient.getBinaryState(state, 'deployer')
      },
      get deploymentVersion() {
        return AirdropClient.getIntegerState(state, 'deployment_version')
      },
      get distributionCount() {
        return AirdropClient.getIntegerState(state, 'distribution_count')
      },
      get distributionSeconds() {
        return AirdropClient.getIntegerState(state, 'distribution_seconds')
      },
      get funder() {
        return AirdropClient.getBinaryState(state, 'funder')
      },
      get funding() {
        return AirdropClient.getIntegerState(state, 'funding')
      },
      get initial() {
        return AirdropClient.getIntegerState(state, 'initial')
      },
      get lockupDelay() {
        return AirdropClient.getIntegerState(state, 'lockup_delay')
      },
      get messengerId() {
        return AirdropClient.getIntegerState(state, 'messenger_id')
      },
      get owner() {
        return AirdropClient.getBinaryState(state, 'owner')
      },
      get parentId() {
        return AirdropClient.getIntegerState(state, 'parent_id')
      },
      get period() {
        return AirdropClient.getIntegerState(state, 'period')
      },
      get periodLimit() {
        return AirdropClient.getIntegerState(state, 'period_limit')
      },
      get periodSeconds() {
        return AirdropClient.getIntegerState(state, 'period_seconds')
      },
      get stakeable() {
        return AirdropClient.getIntegerState(state, 'stakeable')
      },
      get total() {
        return AirdropClient.getIntegerState(state, 'total')
      },
      get updatable() {
        return AirdropClient.getIntegerState(state, 'updatable')
      },
      get vestingDelay() {
        return AirdropClient.getIntegerState(state, 'vesting_delay')
      },
    }
  }

  public compose(): AirdropComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.preconfigure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVestingDelay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setTotal(args: MethodArgs<'set_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setTotal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDistributionCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.configure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantFunder(args: MethodArgs<'grant_funder(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantFunder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFunding(args: MethodArgs<'set_funding(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFunding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reduceTotal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          abortFunding(args: MethodArgs<'abort_funding()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.abortFunding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.close(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AirdropComposer
  }
}
export type AirdropComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the preconfigure(uint64,uint64)void ABI method.
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'preconfigure(uint64,uint64)void'>]>

  /**
   * Calls the set_vesting_delay(uint64)void ABI method.
   *
   * Set vesting delay.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_vesting_delay(uint64)void'>]>

  /**
   * Calls the set_total(uint64)void ABI method.
   *
   * Set total funding.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTotal(args: MethodArgs<'set_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_total(uint64)void'>]>

  /**
   * Calls the set_distribution_count(uint64)void ABI method.
   *
   * Set distribution count.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_distribution_count(uint64)void'>]>

  /**
   * Calls the setup(address,address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'setup(address,address,address,uint64)void'>]>

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'configure(uint64)void'>]>

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * Withdraw funds from contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'withdraw(uint64)uint64'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'fill()void'>]>

  /**
   * Calls the grant_funder(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantFunder(args: MethodArgs<'grant_funder(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'grant_funder(address)void'>]>

  /**
   * Calls the set_funding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFunding(args: MethodArgs<'set_funding(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_funding(uint64)void'>]>

  /**
   * Calls the reduce_total(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'reduce_total(uint64)void'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Airdrop smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): AirdropComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Airdrop smart contract using the abort_funding()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    abortFunding(args: MethodArgs<'abort_funding()void'>, params?: AppClientComposeCallCoreParams): AirdropComposer<[...TReturns, MethodReturn<'abort_funding()void'>]>
    /**
     * Deletes an existing instance of the Airdrop smart contract using the close()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams): AirdropComposer<[...TReturns, MethodReturn<'close()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Airdrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AirdropComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AirdropComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AirdropComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AirdropComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AirdropComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
