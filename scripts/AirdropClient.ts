/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "abort_funding()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "preconfigure(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_vesting_delay(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_total(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_distribution_count(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setup(address,address,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "configure(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "close()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fill()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_funder(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_funding(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reduce_total(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5BaXJkcm9wLmFwcHJvdmFsX3Byb2dyYW06CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fZW50cnlwb2ludEAyCiAgICBjYWxsc3ViIF9faW5pdF9fCgptYWluX2VudHJ5cG9pbnRAMjoKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMjQKICAgIG1ldGhvZCAiYWJvcnRfZnVuZGluZygpdm9pZCIKICAgIG1ldGhvZCAicHJlY29uZmlndXJlKHVpbnQ2NCx1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAic2V0X3Zlc3RpbmdfZGVsYXkodWludDY0KXZvaWQiCiAgICBtZXRob2QgInNldF90b3RhbCh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAic2V0X2Rpc3RyaWJ1dGlvbl9jb3VudCh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAic2V0dXAoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDY0KXZvaWQiCiAgICBtZXRob2QgImNvbmZpZ3VyZSh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAid2l0aGRyYXcodWludDY0KXVpbnQ2NCIKICAgIG1ldGhvZCAiY2xvc2UoKXZvaWQiCiAgICBtZXRob2QgInRyYW5zZmVyKGFkZHJlc3Mpdm9pZCIKICAgIG1ldGhvZCAiZmlsbCgpdm9pZCIKICAgIG1ldGhvZCAiZ3JhbnRfZnVuZGVyKGFkZHJlc3Mpdm9pZCIKICAgIG1ldGhvZCAic2V0X2Z1bmRpbmcodWludDY0KXZvaWQiCiAgICBtZXRob2QgInJlZHVjZV90b3RhbCh1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAic2V0X2RlbGVnYXRlKGFkZHJlc3Mpdm9pZCIKICAgIG1ldGhvZCAicGFydGljaXBhdGUoYnl0ZVszMl0sYnl0ZVszMl0sdWludDY0LHVpbnQ2NCx1aW50NjQsYnl0ZVs2NF0pdm9pZCIKICAgIG1ldGhvZCAic2V0X3ZlcnNpb24odWludDY0LHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJhcHByb3ZlX3VwZGF0ZShib29sKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2Fib3J0X2Z1bmRpbmdfcm91dGVANCBtYWluX3ByZWNvbmZpZ3VyZV9yb3V0ZUA1IG1haW5fc2V0X3Zlc3RpbmdfZGVsYXlfcm91dGVANiBtYWluX3NldF90b3RhbF9yb3V0ZUA3IG1haW5fc2V0X2Rpc3RyaWJ1dGlvbl9jb3VudF9yb3V0ZUA4IG1haW5fc2V0dXBfcm91dGVAOSBtYWluX2NvbmZpZ3VyZV9yb3V0ZUAxMCBtYWluX3dpdGhkcmF3X3JvdXRlQDExIG1haW5fY2xvc2Vfcm91dGVAMTIgbWFpbl90cmFuc2Zlcl9yb3V0ZUAxMyBtYWluX2ZpbGxfcm91dGVAMTQgbWFpbl9ncmFudF9mdW5kZXJfcm91dGVAMTUgbWFpbl9zZXRfZnVuZGluZ19yb3V0ZUAxNiBtYWluX3JlZHVjZV90b3RhbF9yb3V0ZUAxNyBtYWluX3NldF9kZWxlZ2F0ZV9yb3V0ZUAxOCBtYWluX3BhcnRpY2lwYXRlX3JvdXRlQDE5IG1haW5fc2V0X3ZlcnNpb25fcm91dGVAMjAgbWFpbl9hcHByb3ZlX3VwZGF0ZV9yb3V0ZUAyMQogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9hYm9ydF9mdW5kaW5nX3JvdXRlQDQ6CiAgICAvLyBzcmMvY29udHJhY3QucHk6ODczLTg3NQogICAgLy8gIyBvdmVycmlkZSBmdW5kYWJsZSBhYm9ydF9mdW5kaW5nIGFiaW1ldGhvZAogICAgLy8gIyAgIGNsb3NlIG9mZmxpbmUgb24gZGVsZXRlIHRvIG93bmVyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnQgRGVsZXRlQXBwbGljYXRpb24KICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIERlbGV0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBhYm9ydF9mdW5kaW5nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3ByZWNvbmZpZ3VyZV9yb3V0ZUA1OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU3NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHByZWNvbmZpZ3VyZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRfdmVzdGluZ19kZWxheV9yb3V0ZUA2OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU4OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU4OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF92ZXN0aW5nX2RlbGF5CiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF90b3RhbF9yb3V0ZUA3OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF90b3RhbAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRfZGlzdHJpYnV0aW9uX2NvdW50X3JvdXRlQDg6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X2Rpc3RyaWJ1dGlvbl9jb3VudAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXR1cF9yb3V0ZUA5OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldHVwCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2NvbmZpZ3VyZV9yb3V0ZUAxMDoKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NDcKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBjb25maWd1cmUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fd2l0aGRyYXdfcm91dGVAMTE6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NjYyLTY3OQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogd2l0aGRyYXcKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGFtb3VudAogICAgLy8gIyByZXR1cm5zOiBtaW4gYmFsYW5jZQogICAgLy8gIyBwdXJwb3NlOiBleHRyYWN0IGZ1bmRzIGZyb20gY29udHJhY3QKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIC0gbGV0IGJhbGFuY2UgYmUgdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiB0aGUKICAgIC8vICMgICBjb250cmFjdAogICAgLy8gIyAtIGJhbGFuY2UgLSBhbW91bnQgPj0gbWluX2JhbGFuY2UKICAgIC8vICMgICAoZmVlIHBhaWQgaW4gYXBwbCB0eG4pCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSB0cmFuc2ZlciBhbW91bnQgZnJvbSB0aGUgY29udHJhY3QgYWNjb3VudAogICAgLy8gIyAgIHRvIG93bmVyCiAgICAvLyAjIG5vdGVzOiBjb3N0cyAyIGZlZXMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NjItNjc5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiB3aXRoZHJhdwogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gYW1vdW50CiAgICAvLyAjIHJldHVybnM6IG1pbiBiYWxhbmNlCiAgICAvLyAjIHB1cnBvc2U6IGV4dHJhY3QgZnVuZHMgZnJvbSBjb250cmFjdAogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgb3duZXIKICAgIC8vICMgLSBsZXQgYmFsYW5jZSBiZSB0aGUgY3VycmVudCBiYWxhbmNlIG9mIHRoZQogICAgLy8gIyAgIGNvbnRyYWN0CiAgICAvLyAjIC0gYmFsYW5jZSAtIGFtb3VudCA+PSBtaW5fYmFsYW5jZQogICAgLy8gIyAgIChmZWUgcGFpZCBpbiBhcHBsIHR4bikKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIHRyYW5zZmVyIGFtb3VudCBmcm9tIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjICAgdG8gb3duZXIKICAgIC8vICMgbm90ZXM6IGNvc3RzIDIgZmVlcwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHdpdGhkcmF3CiAgICBpdG9iCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2Nsb3NlX3JvdXRlQDEyOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjcwMi03MTQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGNsb3NlCiAgICAvLyAjIHB1cnBvc2U6IGRlbGV0ZXMgY29udHJhY3QKICAgIC8vICMgcHJlLWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gbWluIGJhbGFuY2UgaXMgMAogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gY29udHJhY3QgaXMgZGVsZXRlZAogICAgLy8gIyAtIGFjY291bnQgY2xvc2VkIG91dCB0byBvd25lciBpZiBpdCBoYXMgYSBiYWxhbmNlCiAgICAvLyAjIG5vdGVzOgogICAgLy8gIyAtIHNob3VsZCBiZSBhbGxlZCB3aXRoIG9uQ29tcGxldGlvbgogICAgLy8gIyAgIGRlbGV0ZUFwcGxpY2F0aW9uCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBpbnQgRGVsZXRlQXBwbGljYXRpb24KICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIERlbGV0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBjbG9zZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl90cmFuc2Zlcl9yb3V0ZUAxMzoKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgdHJhbnNmZXIKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fZmlsbF9yb3V0ZUAxNDoKICAgIC8vIHNyYy9jb250cmFjdC5weToxMzAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBmaWxsCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2dyYW50X2Z1bmRlcl9yb3V0ZUAxNToKICAgIC8vIHNyYy9jb250cmFjdC5weToxNDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg0MC04NDIKICAgIC8vIGNsYXNzIEFpcmRyb3AoCiAgICAvLyAgICAgTG9ja2FibGUsIE93bmFibGUsIEZ1bmRhYmxlLCBEZXBsb3lhYmxlLCBTdGFrZWFibGUsIFVwZ3JhZGVhYmxlLCBSZWNlaXZlcgogICAgLy8gKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9jb250cmFjdC5weToxNDAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBncmFudF9mdW5kZXIKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fc2V0X2Z1bmRpbmdfcm91dGVAMTY6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTQ3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTQ3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X2Z1bmRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcmVkdWNlX3RvdGFsX3JvdXRlQDE3OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE2NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE2NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHJlZHVjZV90b3RhbAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRfZGVsZWdhdGVfcm91dGVAMTg6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MjI2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjI2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X2RlbGVnYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3BhcnRpY2lwYXRlX3JvdXRlQDE5OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIzMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIzMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHBhcnRpY2lwYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldF92ZXJzaW9uX3JvdXRlQDIwOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHNldF92ZXJzaW9uCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2FwcHJvdmVfdXBkYXRlX3JvdXRlQDIxOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM2NS0zNzUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGFwcHJvdmVfdXBkYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhcHByb3ZhbCwgYXBwcm92YWwgc3RhdHVzCiAgICAvLyAjIHB1cnBvc2U6IGFwcHJvdmUgdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdXBkYXRhYmxlIHNldCB0byBhcHByb3ZhbAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM2NS0zNzUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGFwcHJvdmVfdXBkYXRlCiAgICAvLyAjIGFyZ3VtZW50czoKICAgIC8vICMgLSBhcHByb3ZhbCwgYXBwcm92YWwgc3RhdHVzCiAgICAvLyAjIHB1cnBvc2U6IGFwcHJvdmUgdXBkYXRlCiAgICAvLyAjIHByZS1jb25kaXRpb25zCiAgICAvLyAjIC0gb25seSBjYWxsYWJsZSBieSBvd25lcgogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gdXBkYXRhYmxlIHNldCB0byBhcHByb3ZhbAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFwcHJvdmVfdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AyNDoKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDAtODQyCiAgICAvLyBjbGFzcyBBaXJkcm9wKAogICAgLy8gICAgIExvY2thYmxlLCBPd25hYmxlLCBGdW5kYWJsZSwgRGVwbG95YWJsZSwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSwgUmVjZWl2ZXIKICAgIC8vICk6CiAgICBpbnQgMAogICAgaW50IDQKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIG1hdGNoIG1haW5fb25fY3JlYXRlQDI1IG1haW5fb25fdXBkYXRlQDI2CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX29uX2NyZWF0ZUAyNToKICAgIC8vIHNyYy9jb250cmFjdC5weTo0MTEKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTo0MTEtNDEyCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgb25fY3JlYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBjYWxsc3ViIG9uX2NyZWF0ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9vbl91cGRhdGVAMjY6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MzU2CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTYtMzU3CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJVcGRhdGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIG9uX3VwZGF0ZShzZWxmKSAtPiBOb25lOgogICAgY2FsbHN1YiBvbl91cGRhdGUKICAgIGludCAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdC5BaXJkcm9wLmFib3J0X2Z1bmRpbmcoKSAtPiB2b2lkOgphYm9ydF9mdW5kaW5nOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg3My04NzYKICAgIC8vICMgb3ZlcnJpZGUgZnVuZGFibGUgYWJvcnRfZnVuZGluZyBhYmltZXRob2QKICAgIC8vICMgICBjbG9zZSBvZmZsaW5lIG9uIGRlbGV0ZSB0byBvd25lcgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uRGVsZXRlQXBwbGljYXRpb25dKQogICAgLy8gZGVmIGFib3J0X2Z1bmRpbmcoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg3OQogICAgLy8gVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciBvciBUeG4uc2VuZGVyID09IHNlbGYub3duZXIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODc5CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyIG9yIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lcgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgID09CiAgICBibnogYWJvcnRfZnVuZGluZ19ib29sX3RydWVAMgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODc5CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyIG9yIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lcgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGJ6IGFib3J0X2Z1bmRpbmdfYm9vbF9mYWxzZUAzCgphYm9ydF9mdW5kaW5nX2Jvb2xfdHJ1ZUAyOgogICAgaW50IDEKICAgIGIgYWJvcnRfZnVuZGluZ19ib29sX21lcmdlQDQKCmFib3J0X2Z1bmRpbmdfYm9vbF9mYWxzZUAzOgogICAgaW50IDAKCmFib3J0X2Z1bmRpbmdfYm9vbF9tZXJnZUA0OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg3Ny04ODAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyIG9yIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lcgogICAgLy8gKSwgIm11c3QgYmUgZnVuZGVyIG9yIG93bmVyIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyIG9yIG93bmVyCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODgxLTg4MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKQogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODgxLTg4MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODMtODg0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlKHNlbGYub3duZXIpCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4ODMtODg0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlKHNlbGYub3duZXIpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBjYWxsc3ViIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlCiAgICByZXRzdWIKCgovLyB1dGlscy5jbG9zZV9vZmZsaW5lX29uX2RlbGV0ZShjbG9zZV9yZW1haW5kZXJfdG86IGJ5dGVzKSAtPiB2b2lkOgpjbG9zZV9vZmZsaW5lX29uX2RlbGV0ZToKICAgIC8vIHNyYy91dGlscy5weTo1MC01MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBjbG9zZV9vZmZsaW5lX29uX2RlbGV0ZShjbG9zZV9yZW1haW5kZXJfdG86IEFjY291bnQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy91dGlscy5weTo1MwogICAgLy8gb2NhID0gVHhuLm9uX2NvbXBsZXRpb24KICAgIHR4biBPbkNvbXBsZXRpb24KICAgIC8vIHNyYy91dGlscy5weTo1NAogICAgLy8gaWYgb2NhID09IE9uQ29tcGxldGVBY3Rpb24uRGVsZXRlQXBwbGljYXRpb246CiAgICBpbnQgRGVsZXRlQXBwbGljYXRpb24KICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNyYy91dGlscy5weTo3MAogICAgLy8gcmVjZWl2ZXI9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgLy8gc3JjL3V0aWxzLnB5OjczCiAgICAvLyBhbW91bnQ9b3AuR2xvYmFsLm1pbl9iYWxhbmNlLAogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC8vIHNyYy91dGlscy5weTo3NQogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhrZXlyZWdfdHhuLCBwbXRfdHhuKQogICAgaXR4bl9iZWdpbgogICAgLy8gc3JjL3V0aWxzLnB5OjY0LTY2CiAgICAvLyBzdGF0ZV9wcm9vZl9rZXk9Qnl0ZXMuZnJvbV9iYXNlNjQoCiAgICAvLyAgICAgIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPT0iCiAgICAvLyApLAogICAgYnl0ZSBiYXNlNjQgQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9PQogICAgaXR4bl9maWVsZCBTdGF0ZVByb29mUEsKICAgIC8vIHNyYy91dGlscy5weTo2MwogICAgLy8gdm90ZV9rZXlfZGlsdXRpb249VUludDY0KDApLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCiAgICAvLyBzcmMvdXRpbHMucHk6NjIKICAgIC8vIHZvdGVfbGFzdD1VSW50NjQoMCksCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBWb3RlTGFzdAogICAgLy8gc3JjL3V0aWxzLnB5OjYxCiAgICAvLyB2b3RlX2ZpcnN0PVVJbnQ2NCgwKSwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIFZvdGVGaXJzdAogICAgLy8gc3JjL3V0aWxzLnB5OjU4LTYwCiAgICAvLyBzZWxlY3Rpb25fa2V5PUJ5dGVzLmZyb21fYmFzZTY0KAogICAgLy8gICAgICJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPSIKICAgIC8vICksCiAgICBieXRlIGJhc2U2NCBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPQogICAgaXR4bl9maWVsZCBTZWxlY3Rpb25QSwogICAgLy8gc3JjL3V0aWxzLnB5OjU3CiAgICAvLyB2b3RlX2tleT1CeXRlcy5mcm9tX2Jhc2U2NCgiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT0iKSwKICAgIGJ5dGUgYmFzZTY0IEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9CiAgICBpdHhuX2ZpZWxkIFZvdGVQSwogICAgLy8gc3JjL3V0aWxzLnB5OjU2CiAgICAvLyBub25fcGFydGljaXBhdGlvbj1UcnVlLAogICAgaW50IDEKICAgIGl0eG5fZmllbGQgTm9ucGFydGljaXBhdGlvbgogICAgLy8gc3JjL3V0aWxzLnB5OjU1CiAgICAvLyBrZXlyZWdfdHhuID0gaXR4bi5LZXlSZWdpc3RyYXRpb24oCiAgICBpbnQga2V5cmVnCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzcmMvdXRpbHMucHk6NjcKICAgIC8vIGZlZT0wLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzcmMvdXRpbHMucHk6NzUKICAgIC8vIGl0eG4uc3VibWl0X3R4bnMoa2V5cmVnX3R4biwgcG10X3R4bikKICAgIGl0eG5fbmV4dAogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzcmMvdXRpbHMucHk6NjkKICAgIC8vIHBtdF90eG4gPSBpdHhuLlBheW1lbnQoCiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzcmMvdXRpbHMucHk6NzIKICAgIC8vIGZlZT0wLAogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzcmMvdXRpbHMucHk6NzUKICAgIC8vIGl0eG4uc3VibWl0X3R4bnMoa2V5cmVnX3R4biwgcG10X3R4bikKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Mb2NrYWJsZS5wcmVjb25maWd1cmUocGVyaW9kOiBieXRlcywgZGVhZGxpbmU6IGJ5dGVzKSAtPiB2b2lkOgpwcmVjb25maWd1cmU6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NTc1LTU3NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcHJlY29uZmlndXJlKHNlbGYsIHBlcmlvZDogYXJjNC5VSW50NjQsIGRlYWRsaW5lOiBhcmM0LlVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU4MC01ODEKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU4MC01ODEKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBvd25lciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9jb250cmFjdC5weTo1ODIKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIG5vdCBpbml0aWFsaXplZCIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTgyCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIGZ1bmRlciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9jb250cmFjdC5weTo1ODMtNTg0CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJtdXN0IGJlIGNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdG9yCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTg1LTU4NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnBlcmlvZCA9IHBlcmlvZC5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTg1LTU4NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnBlcmlvZCA9IHBlcmlvZC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6NTg3CiAgICAvLyBzZWxmLmRlYWRsaW5lID0gZGVhZGxpbmUubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDMKICAgIC8vIHNlbGYuZGVhZGxpbmUgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJkZWFkbGluZSIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1ODcKICAgIC8vIHNlbGYuZGVhZGxpbmUgPSBkZWFkbGluZS5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Mb2NrYWJsZS5zZXRfdmVzdGluZ19kZWxheSh2ZXN0aW5nX2RlbGF5OiBieXRlcykgLT4gdm9pZDoKc2V0X3Zlc3RpbmdfZGVsYXk6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NTg5LTU5MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X3Zlc3RpbmdfZGVsYXkoc2VsZiwgdmVzdGluZ19kZWxheTogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo1OTQtNTk1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLm93bmVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJvd25lciBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1OTQtNTk1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLm93bmVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJvd25lciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gb3duZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTk2CiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU5NgogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBmdW5kZXIgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvY29udHJhY3QucHk6NTk3LTU5OAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzLCAibXVzdCBiZSBjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgY3JlYXRvcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjU5OS02MDAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gdmVzdGluZ19kZWxheS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0NgogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiVkVTVElOR19ERUxBWSIpICAjIGV4KSAxMgogICAgYnl0ZSAidmVzdGluZ19kZWxheSIKICAgIC8vIHNyYy9jb250cmFjdC5weTo1OTktNjAwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudmVzdGluZ19kZWxheSA9IHZlc3RpbmdfZGVsYXkubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuTG9ja2FibGUuc2V0X3RvdGFsKGZ1bmRpbmc6IGJ5dGVzKSAtPiB2b2lkOgpzZXRfdG90YWw6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NjAyLTYwMwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X3RvdGFsKHNlbGYsIGZ1bmRpbmc6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjA3LTYwOAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjA3LTYwOAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG93bmVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYwOQogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MDkKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gZnVuZGVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYxMC02MTEKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MTItNjEzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBmdW5kaW5nLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjEyLTYxMwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnRvdGFsID0gZnVuZGluZy5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Mb2NrYWJsZS5zZXRfZGlzdHJpYnV0aW9uX2NvdW50KGRpc3RyaWJ1dGlvbl9jb3VudDogYnl0ZXMpIC0+IHZvaWQ6CnNldF9kaXN0cmlidXRpb25fY291bnQ6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NjE1LTYxNgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0X2Rpc3RyaWJ1dGlvbl9jb3VudChzZWxmLCBkaXN0cmlidXRpb25fY291bnQ6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjIwLTYyMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjIwLTYyMQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5vd25lciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAib3duZXIgbm90IGluaXRpYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIG93bmVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYyMgogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGVyID09IEdsb2JhbC56ZXJvX2FkZHJlc3MsICJmdW5kZXIgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MjIKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gZnVuZGVyIG5vdCBpbml0aWFsaXplZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYyMy02MjQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MjUtNjI2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX2NvdW50ID0gZGlzdHJpYnV0aW9uX2NvdW50Lm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDQ4CiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkRJU1RSSUJVVElPTl9DT1VOVCIpICAjIGV4KSAxMgogICAgYnl0ZSAiZGlzdHJpYnV0aW9uX2NvdW50IgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYyNS02MjYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fY291bnQgPSBkaXN0cmlidXRpb25fY291bnQubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuTG9ja2FibGUuc2V0dXAoZGVwbG95ZXI6IGJ5dGVzLCBvd25lcjogYnl0ZXMsIGZ1bmRlcjogYnl0ZXMsIGluaXRpYWw6IGJ5dGVzKSAtPiB2b2lkOgpzZXR1cDoKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MjgtNjM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXR1cCgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGRlcGxveWVyOiBhcmM0LkFkZHJlc3MsCiAgICAvLyAgICAgb3duZXI6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgICBmdW5kZXI6IGFyYzQuQWRkcmVzcywKICAgIC8vICAgICBpbml0aWFsOiBhcmM0LlVJbnQ2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYzNi02MzcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYzNi02MzcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYub3duZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgIm93bmVyIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBvd25lciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MzgKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRlciA9PSBHbG9iYWwuemVyb19hZGRyZXNzLCAiZnVuZGVyIG5vdCBpbml0aWFsaXplZCIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjM4CiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kZXIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcywgImZ1bmRlciBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIGZ1bmRlciBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNyYy9jb250cmFjdC5weTo2MzktNjQwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJtdXN0IGJlIGNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdG9yCiAgICAvLyBzcmMvY29udHJhY3QucHk6Mzk3CiAgICAvLyBzZWxmLmRlcGxveWVyID0gQWNjb3VudCgpCiAgICBieXRlICJkZXBsb3llciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NDEtNjQyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuZGVwbG95ZXIgPSBkZXBsb3llci5uYXRpdmUKICAgIGZyYW1lX2RpZyAtNAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjQzCiAgICAvLyBzZWxmLm93bmVyID0gb3duZXIubmF0aXZlCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjQ0CiAgICAvLyBzZWxmLmZ1bmRlciA9IGZ1bmRlci5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NDUKICAgIC8vIHNlbGYuaW5pdGlhbCA9IGluaXRpYWwubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDIKICAgIC8vIHNlbGYuaW5pdGlhbCA9IFVJbnQ2NCgpICAjIDAKICAgIGJ5dGUgImluaXRpYWwiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjQ1CiAgICAvLyBzZWxmLmluaXRpYWwgPSBpbml0aWFsLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkxvY2thYmxlLmNvbmZpZ3VyZShwZXJpb2Q6IGJ5dGVzKSAtPiB2b2lkOgpjb25maWd1cmU6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NjQ3LTY0OAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY29uZmlndXJlKHNlbGYsIHBlcmlvZDogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NDktNjUwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRpbmcgPT0gMCwgImZ1bmRpbmcgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjQ5LTY1MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID09IDAsICJmdW5kaW5nIG5vdCBpbml0aWFsaXplZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIGZ1bmRpbmcgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjUxCiAgICAvLyBhc3NlcnQgc2VsZi50b3RhbCA9PSAwLCAidG90YWwgbm90IGluaXRpYWxpemVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NTEKICAgIC8vIGFzc2VydCBzZWxmLnRvdGFsID09IDAsICJ0b3RhbCBub3QgaW5pdGlhbGl6ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWwgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gdG90YWwgbm90IGluaXRpYWxpemVkCiAgICAvLyBzcmMvY29udHJhY3QucHk6NjUyLTY1MwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1Mi02NTMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciwgIm11c3QgYmUgb3duZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NTQtNjU1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBwZXJpb2QgPD0gVGVtcGxhdGVWYXJbVUludDY0XSgiUEVSSU9EX0xJTUlUIikKICAgIGludCBUTVBMX1BFUklPRF9MSU1JVAogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBiPj0KICAgIGFzc2VydAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1NgogICAgLy8gYXNzZXJ0IHBlcmlvZCA+PSAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBiPj0KICAgIGFzc2VydAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1Ny02NTgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZGVhZGxpbmUgPiBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCwgImRlYWRsaW5lIG5vdCBwYXNzZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0MwogICAgLy8gc2VsZi5kZWFkbGluZSA9IFVJbnQ2NCgpICAjIDAKICAgIGJ5dGUgImRlYWRsaW5lIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1Ny02NTgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZGVhZGxpbmUgPiBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCwgImRlYWRsaW5lIG5vdCBwYXNzZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVhZGxpbmUgZXhpc3RzCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICA+CiAgICBhc3NlcnQgLy8gZGVhZGxpbmUgbm90IHBhc3NlZAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1OS02NjAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5wZXJpb2QgPSBwZXJpb2QubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDEKICAgIC8vIHNlbGYucGVyaW9kID0gVUludDY0KCkgICMgMAogICAgYnl0ZSAicGVyaW9kIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1OS02NjAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5wZXJpb2QgPSBwZXJpb2QubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuTG9ja2FibGUud2l0aGRyYXcoYW1vdW50OiBieXRlcykgLT4gdWludDY0Ogp3aXRoZHJhdzoKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NjItNjgwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiB3aXRoZHJhdwogICAgLy8gIyBhcmd1bWVudHM6CiAgICAvLyAjIC0gYW1vdW50CiAgICAvLyAjIHJldHVybnM6IG1pbiBiYWxhbmNlCiAgICAvLyAjIHB1cnBvc2U6IGV4dHJhY3QgZnVuZHMgZnJvbSBjb250cmFjdAogICAgLy8gIyBwcmUtY29uZGl0aW9ucwogICAgLy8gIyAtIG9ubHkgY2FsbGFibGUgYnkgb3duZXIKICAgIC8vICMgLSBsZXQgYmFsYW5jZSBiZSB0aGUgY3VycmVudCBiYWxhbmNlIG9mIHRoZQogICAgLy8gIyAgIGNvbnRyYWN0CiAgICAvLyAjIC0gYmFsYW5jZSAtIGFtb3VudCA+PSBtaW5fYmFsYW5jZQogICAgLy8gIyAgIChmZWUgcGFpZCBpbiBhcHBsIHR4bikKICAgIC8vICMgcG9zdC1jb25kaXRpb25zOgogICAgLy8gIyAtIHRyYW5zZmVyIGFtb3VudCBmcm9tIHRoZSBjb250cmFjdCBhY2NvdW50CiAgICAvLyAjICAgdG8gb3duZXIKICAgIC8vICMgbm90ZXM6IGNvc3RzIDIgZmVlcwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgd2l0aGRyYXcoc2VsZiwgYW1vdW50OiBhcmM0LlVJbnQ2NCkgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICBieXRlICIiCiAgICBkdXBuIDIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2ODQtNjg1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6Njg0LTY4NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY4Ni02ODcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gaWYgc2VsZi5mdW5kaW5nID4gMDoKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTAKICAgIC8vIHNlbGYuZnVuZGluZyA9IFVJbnQ2NCgpCiAgICBieXRlICJmdW5kaW5nIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY4Ni02ODcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gaWYgc2VsZi5mdW5kaW5nID4gMDoKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nIGV4aXN0cwogICAgYnogd2l0aGRyYXdfZWxzZV9ib2R5QDUKICAgIC8vIHNyYy9jb250cmFjdC5weTo2ODgKICAgIC8vIG1pbl9iYWxhbmNlID0gc2VsZi5jYWxjdWxhdGVfbWluX2JhbGFuY2UoKQogICAgY2FsbHN1YiBjYWxjdWxhdGVfbWluX2JhbGFuY2UKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6Njg5CiAgICAvLyBhdmFpbGFibGVfYmFsYW5jZSA9IGdldF9hdmFpbGFibGVfYmFsYW5jZSgpCiAgICBjYWxsc3ViIGdldF9hdmFpbGFibGVfYmFsYW5jZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY5MAogICAgLy8gYXNzZXJ0IGF2YWlsYWJsZV9iYWxhbmNlIC0gYW1vdW50Lm5hdGl2ZSA+PSBtaW5fYmFsYW5jZSwgImJhbGFuY2UgYXZhaWxhYmxlIgogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLQogICAgPD0KICAgIGFzc2VydCAvLyBiYWxhbmNlIGF2YWlsYWJsZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY5MQogICAgLy8gaWYgYW1vdW50ID4gMDoKICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGI+CiAgICBieiB3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNyYy9jb250cmFjdC5weTo2OTIKICAgIC8vIGl0eG4uUGF5bWVudChhbW91bnQ9YW1vdW50Lm5hdGl2ZSwgcmVjZWl2ZXI9VHhuLnNlbmRlciwgZmVlPTApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gU2VuZGVyCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgMQogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGludCBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKCndpdGhkcmF3X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNyYy9jb250cmFjdC5weTo2OTMKICAgIC8vIHJldHVybiBtaW5fYmFsYW5jZQogICAgcmV0c3ViCgp3aXRoZHJhd19lbHNlX2JvZHlANToKICAgIC8vIHNyYy9jb250cmFjdC5weTo2OTUKICAgIC8vIG1pbl9iYWxhbmNlID0gc2VsZi50b3RhbAogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2OTUKICAgIC8vIG1pbl9iYWxhbmNlID0gc2VsZi50b3RhbAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbCBleGlzdHMKICAgIC8vIHNyYy9jb250cmFjdC5weTo2OTYKICAgIC8vIGF2YWlsYWJsZV9iYWxhbmNlID0gZ2V0X2F2YWlsYWJsZV9iYWxhbmNlKCkKICAgIGNhbGxzdWIgZ2V0X2F2YWlsYWJsZV9iYWxhbmNlCiAgICAvLyBzcmMvY29udHJhY3QucHk6Njk3CiAgICAvLyBhc3NlcnQgYXZhaWxhYmxlX2JhbGFuY2UgLSBhbW91bnQubmF0aXZlID49IG1pbl9iYWxhbmNlLCAiYmFsYW5jZSBhdmFpbGFibGUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICAtCiAgICA8PQogICAgYXNzZXJ0IC8vIGJhbGFuY2UgYXZhaWxhYmxlCiAgICAvLyBzcmMvY29udHJhY3QucHk6Njk4CiAgICAvLyBpZiBhbW91bnQgPiAwOgogICAgZnJhbWVfZGlnIC0xCiAgICBieXRlIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgYj4KICAgIGJ6IHdpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAOAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY5OQogICAgLy8gaXR4bi5QYXltZW50KGFtb3VudD1hbW91bnQubmF0aXZlLCByZWNlaXZlcj1UeG4uc2VuZGVyLCBmZWU9MCkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIHR4biBTZW5kZXIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAyCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaW50IHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAoKd2l0aGRyYXdfYWZ0ZXJfaWZfZWxzZUA4OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjcwMAogICAgLy8gcmV0dXJuIG1pbl9iYWxhbmNlCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Mb2NrYWJsZS5jYWxjdWxhdGVfbWluX2JhbGFuY2UoKSAtPiB1aW50NjQ6CmNhbGN1bGF0ZV9taW5fYmFsYW5jZToKICAgIC8vIHNyYy9jb250cmFjdC5weTo3MjctNzQyCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiBtaW5fYmFsYW5jZSAoaW50ZXJuYWwpCiAgICAvLyAjIGFyZ3VtZW50czogTm9uZQogICAgLy8gIyBwdXJwb3NlOiBjYWxjdWFsdGUgbWluaW11bSBiYWxhbmNlCiAgICAvLyAjIHByZS1jb25kaXRpb25zOiBOb25lCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyBub3RlczoKICAgIC8vICMgLSBsZXQgcGVyaW9kID0gbnVtYmVyIG9mIG1vbnRocyB0byB0byBsb2NrdXAKICAgIC8vICMgICAgICAgdG90YWwgPSB0b3RhbCBhbW91bnQgaW50aWFsbHkgZnVuZGVkIChhaXJkcm9wICsgbG9ja3VwIGJvbnVzKQogICAgLy8gIyAgICAgICB5ID0gdmVzdGluZyBkZWxheSBpbiBtb250aHMKICAgIC8vICMgICAgICAgcCA9IDEgLyAoc2VsZi5wZXJpb2QgeCAxMikgb3IgMSAvIChwZXJpb2QpCiAgICAvLyAjIC0gbWltdW11bSBiYWxhbmNlID0KICAgIC8vICMgICAgIHRvdGFsIHggbWluKDEsIHAgeCBtYXgoMCwgKHBlcmlvZCAtIChub3coKSAtIGZ1bmRpbmcgKyB5IHggc2Vjb25kcy1pbi1tb250aCkpIC8gc2Vjb25kcy1pbi1tb250aCkpCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGN1bGF0ZV9taW5fYmFsYW5jZShzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NDMKICAgIC8vIG5vdzogVUludDY0ID0gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NDYKICAgIC8vIHNlbGYudmVzdGluZ19kZWxheSwKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDQ2CiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVNUSU5HX0RFTEFZIikgICMgZXgpIDEyCiAgICBieXRlICJ2ZXN0aW5nX2RlbGF5IgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc0NgogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5LAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZlc3RpbmdfZGVsYXkgZXhpc3RzCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzQ3CiAgICAvLyBzZWxmLnBlcmlvZF9zZWNvbmRzLAogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDQKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfU0VDT05EUyIpICAjIGV4KSAyNTkyMDAwCiAgICBieXRlICJwZXJpb2Rfc2Vjb25kcyIKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NDcKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGVyaW9kX3NlY29uZHMgZXhpc3RzCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzQ4CiAgICAvLyBzZWxmLmxvY2t1cF9kZWxheSwKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDQ1CiAgICAvLyBzZWxmLmxvY2t1cF9kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkxPQ0tVUF9ERUxBWSIpICAjIGV4KSAxMgogICAgYnl0ZSAibG9ja3VwX2RlbGF5IgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc0OAogICAgLy8gc2VsZi5sb2NrdXBfZGVsYXksCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubG9ja3VwX2RlbGF5IGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc0OQogICAgLy8gc2VsZi5wZXJpb2QsCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzQ5CiAgICAvLyBzZWxmLnBlcmlvZCwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wZXJpb2QgZXhpc3RzCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzUwCiAgICAvLyBzZWxmLmZ1bmRpbmcsCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NTAKICAgIC8vIHNlbGYuZnVuZGluZywKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kaW5nIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc1MQogICAgLy8gc2VsZi50b3RhbCwKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzUxCiAgICAvLyBzZWxmLnRvdGFsLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsIGV4aXN0cwogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc1MgogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fY291bnQsCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0OAogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fY291bnQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJESVNUUklCVVRJT05fQ09VTlQiKSAgIyBleCkgMTIKICAgIGJ5dGUgImRpc3RyaWJ1dGlvbl9jb3VudCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NTIKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX2NvdW50LAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmRpc3RyaWJ1dGlvbl9jb3VudCBleGlzdHMKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NTMKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX3NlY29uZHMsCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0OQogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fc2Vjb25kcyA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oCiAgICBieXRlICJkaXN0cmlidXRpb25fc2Vjb25kcyIKICAgIC8vIHNyYy9jb250cmFjdC5weTo3NTMKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX3NlY29uZHMsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGlzdHJpYnV0aW9uX3NlY29uZHMgZXhpc3RzCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzQ0LTc1NAogICAgLy8gbWluX2JhbGFuY2U6IFVJbnQ2NCA9IGNhbGN1bGF0ZV9tYWJfcHVyZSgKICAgIC8vICAgICBub3csCiAgICAvLyAgICAgc2VsZi52ZXN0aW5nX2RlbGF5LAogICAgLy8gICAgIHNlbGYucGVyaW9kX3NlY29uZHMsCiAgICAvLyAgICAgc2VsZi5sb2NrdXBfZGVsYXksCiAgICAvLyAgICAgc2VsZi5wZXJpb2QsCiAgICAvLyAgICAgc2VsZi5mdW5kaW5nLAogICAgLy8gICAgIHNlbGYudG90YWwsCiAgICAvLyAgICAgc2VsZi5kaXN0cmlidXRpb25fY291bnQsCiAgICAvLyAgICAgc2VsZi5kaXN0cmlidXRpb25fc2Vjb25kcywKICAgIC8vICkKICAgIGNhbGxzdWIgY2FsY3VsYXRlX21hYl9wdXJlCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzU1CiAgICAvLyByZXR1cm4gbWluX2JhbGFuY2UKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0X21hYi5jYWxjdWxhdGVfbWFiX3B1cmUobm93OiB1aW50NjQsIHZlc3RpbmdfZGVsYXk6IHVpbnQ2NCwgcGVyaW9kX3NlY29uZHM6IHVpbnQ2NCwgbG9ja3VwX2RlbGF5OiB1aW50NjQsIHBlcmlvZDogdWludDY0LCBmdW5kaW5nOiB1aW50NjQsIHRvdGFsOiB1aW50NjQsIGRpc3RyaWJ1dGlvbl9jb3VudDogdWludDY0LCBkaXN0cmlidXRpb25fc2Vjb25kczogdWludDY0KSAtPiB1aW50NjQ6CmNhbGN1bGF0ZV9tYWJfcHVyZToKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6NC0zMAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogY2FsY3VsYXRlX21hYl9wdXJlIChpbnRlcm5hbCkKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIG5vdywgdGltZXN0YW1wCiAgICAvLyAjIC0gdmVzdGluZ19kZWxheSwgaG93IG1hbnkgcGVyaW9kcyBpbiB2ZXN0aW5nCiAgICAvLyAjIC0gcGVyaW9kX3NlY29uZHMsIGhvdyBtYW55IHNlY29uZHMgaW4gcGVyaW9kCiAgICAvLyAjIC0gbG9ja3VwIGRlbGF5LCBob3cgbWFueSBwZXJpb2QgaW4gbG9ja3VwCiAgICAvLyAjIC0gcGVyaW9kLCBob3cgbWFueSBwZXJpb2RzCiAgICAvLyAjIC0gZnVuZGluZywgd2hlbiBmdW5kZWQKICAgIC8vICMgLSB0b3RhbCwgaG93IG11Y2ggZnVuZGVkCiAgICAvLyAjIC0gZGlzdHJpYnV0aW9uX2NvdW50LCBob3cgbWFueSBwZXJpb2RzIGluIGRpc3RyaWJ1dGlvbgogICAgLy8gIyAtIGRpc3RyaWJ1dGlvbl9zZWNvbmRzLCBob3cgbWFueSBzZWNvbmRzIGluIGRpc3RyaWJ1dGlvbgogICAgLy8gIyBwdXJwb3NlOiBjYWxjdWxhdGUgbWluaW11bSBhbGxvd2FibGUgYmFsYW5jZQogICAgLy8gIyByZXR1cm5zJyBtaW5pbXVtIGFsbG93YWJsZSBiYWxhbmNlCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGN1bGF0ZV9tYWJfcHVyZSgKICAgIC8vICAgICBub3c6IFVJbnQ2NCwKICAgIC8vICAgICB2ZXN0aW5nX2RlbGF5OiBVSW50NjQsCiAgICAvLyAgICAgcGVyaW9kX3NlY29uZHM6IFVJbnQ2NCwKICAgIC8vICAgICBsb2NrdXBfZGVsYXk6IFVJbnQ2NCwKICAgIC8vICAgICBwZXJpb2Q6IFVJbnQ2NCwKICAgIC8vICAgICBmdW5kaW5nOiBVSW50NjQsCiAgICAvLyAgICAgdG90YWw6IFVJbnQ2NCwKICAgIC8vICAgICBkaXN0cmlidXRpb25fY291bnQ6IFVJbnQ2NCwKICAgIC8vICAgICBkaXN0cmlidXRpb25fc2Vjb25kczogVUludDY0LAogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byA5IDEKICAgIGJ5dGUgIiIKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzEKICAgIC8vIGxvY2t1cF9wZXJpb2RzID0gbG9ja3VwX2RlbGF5ICogcGVyaW9kCiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNQogICAgKgogICAgLy8gc3JjL2NvbnRyYWN0X21hYi5weTozMgogICAgLy8gbG9ja3VwX3NlY29uZHMgPSBsb2NrdXBfcGVyaW9kcyAqIHBlcmlvZF9zZWNvbmRzCiAgICBmcmFtZV9kaWcgLTcKICAgICoKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzMKICAgIC8vIHZlc3Rpbmdfc2Vjb25kcyA9IHZlc3RpbmdfZGVsYXkgKiBwZXJpb2Rfc2Vjb25kcwogICAgZnJhbWVfZGlnIC04CiAgICBmcmFtZV9kaWcgLTcKICAgICoKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzQKICAgIC8vIGZ1bGx5X3Zlc3RlZCA9IGZ1bmRpbmcgKyB2ZXN0aW5nX3NlY29uZHMgKyBsb2NrdXBfc2Vjb25kcwogICAgZnJhbWVfZGlnIC00CiAgICArCiAgICArCiAgICBkdXAKICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzUKICAgIC8vIGxvY2tlZF91cCA9IG5vdyA8PSBmdWxseV92ZXN0ZWQKICAgIGZyYW1lX2RpZyAtOQogICAgPj0KICAgIC8vIHNyYy9jb250cmFjdF9tYWIucHk6MzYKICAgIC8vIGlmIGxvY2tlZF91cDoKICAgIGJ6IGNhbGN1bGF0ZV9tYWJfcHVyZV9lbHNlX2JvZHlAMgogICAgLy8gc3JjL2NvbnRyYWN0X21hYi5weTozNwogICAgLy8gcmV0dXJuIHRvdGFsCiAgICBmcmFtZV9kaWcgLTMKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpjYWxjdWxhdGVfbWFiX3B1cmVfZWxzZV9ib2R5QDI6CiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjM5CiAgICAvLyBlbGFwc2VkX3BlcmlvZHMgPSAobm93IC0gZnVsbHlfdmVzdGVkKSAvLyBkaXN0cmlidXRpb25fc2Vjb25kcwogICAgZnJhbWVfZGlnIC05CiAgICBmcmFtZV9kaWcgMQogICAgLQogICAgZnJhbWVfZGlnIC0xCiAgICAvCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc3JjL2NvbnRyYWN0X21hYi5weTo0MAogICAgLy8gaWYgZWxhcHNlZF9wZXJpb2RzIDw9IGRpc3RyaWJ1dGlvbl9jb3VudDoKICAgIGZyYW1lX2RpZyAtMgogICAgPD0KICAgIGJ6IGNhbGN1bGF0ZV9tYWJfcHVyZV9lbHNlX2JvZHlANAogICAgLy8gc3JjL2NvbnRyYWN0X21hYi5weTo0MgogICAgLy8gdG90YWwgKiAoZGlzdHJpYnV0aW9uX2NvdW50IC0gZWxhcHNlZF9wZXJpb2RzKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMAogICAgLQogICAgZnJhbWVfZGlnIC0zCiAgICAqCiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjQxLTQzCiAgICAvLyByZXR1cm4gKAogICAgLy8gICAgIHRvdGFsICogKGRpc3RyaWJ1dGlvbl9jb3VudCAtIGVsYXBzZWRfcGVyaW9kcykKICAgIC8vICkgLy8gZGlzdHJpYnV0aW9uX2NvdW50CiAgICBmcmFtZV9kaWcgLTIKICAgIC8KICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpjYWxjdWxhdGVfbWFiX3B1cmVfZWxzZV9ib2R5QDQ6CiAgICAvLyBzcmMvY29udHJhY3RfbWFiLnB5OjQ1CiAgICAvLyByZXR1cm4gVUludDY0KDApCiAgICBpbnQgMAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyB1dGlscy5nZXRfYXZhaWxhYmxlX2JhbGFuY2UoKSAtPiB1aW50NjQ6CmdldF9hdmFpbGFibGVfYmFsYW5jZToKICAgIC8vIHNyYy91dGlscy5weTozNy00MwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogZ2V0X2F2YWlsYWJsZV9iYWxhbmNlIChpbnRlcm5hbCkKICAgIC8vICMgcHVycG9zZTogZ2V0IGF2YWlsYWJsZSBiYWxhbmNlCiAgICAvLyAjIHJldHVybnM6IGFwcCBiYWxhbmNlIGF2YWlsYWJsZSBmb3Igc3BlbmRpbmcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X2F2YWlsYWJsZV9iYWxhbmNlKCkgLT4gVUludDY0OgogICAgcHJvdG8gMCAxCiAgICAvLyBzcmMvdXRpbHMucHk6NDQKICAgIC8vIGJhbGFuY2UgPSBvcC5iYWxhbmNlKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MpCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYmFsYW5jZQogICAgLy8gc3JjL3V0aWxzLnB5OjQ1CiAgICAvLyBtaW5fYmFsYW5jZSA9IG9wLkdsb2JhbC5taW5fYmFsYW5jZQogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC8vIHNyYy91dGlscy5weTo0NgogICAgLy8gYXZhaWxhYmxlX2JhbGFuY2UgPSBiYWxhbmNlIC0gbWluX2JhbGFuY2UKICAgIC0KICAgIC8vIHNyYy91dGlscy5weTo0NwogICAgLy8gcmV0dXJuIGF2YWlsYWJsZV9iYWxhbmNlCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Mb2NrYWJsZS5jbG9zZSgpIC0+IHZvaWQ6CmNsb3NlOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjcwMi03MTUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgZnVuY3Rpb246IGNsb3NlCiAgICAvLyAjIHB1cnBvc2U6IGRlbGV0ZXMgY29udHJhY3QKICAgIC8vICMgcHJlLWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gbWluIGJhbGFuY2UgaXMgMAogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6CiAgICAvLyAjIC0gY29udHJhY3QgaXMgZGVsZXRlZAogICAgLy8gIyAtIGFjY291bnQgY2xvc2VkIG91dCB0byBvd25lciBpZiBpdCBoYXMgYSBiYWxhbmNlCiAgICAvLyAjIG5vdGVzOgogICAgLy8gIyAtIHNob3VsZCBiZSBhbGxlZCB3aXRoIG9uQ29tcGxldGlvbgogICAgLy8gIyAgIGRlbGV0ZUFwcGxpY2F0aW9uCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICAvLyBkZWYgY2xvc2Uoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjcxNi03MTcKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRpbmcgPiAwLCAiZnVuZGVkIgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzE2LTcxNwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IHNlbGYuZnVuZGluZyA+IDAsICJmdW5kZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgIGFzc2VydCAvLyBmdW5kZWQKICAgIC8vIHNyYy9jb250cmFjdC5weTo3MTgtNzE5CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5jYWxjdWxhdGVfbWluX2JhbGFuY2UoKSA9PSAwLCAibWluIGJhbGFuY2Ugbm90IHplcm8iCiAgICBjYWxsc3ViIGNhbGN1bGF0ZV9taW5fYmFsYW5jZQogICAgIQogICAgYXNzZXJ0IC8vIG1pbiBiYWxhbmNlIG5vdCB6ZXJvCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzIyCiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlcgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzIyCiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlcgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm93bmVyIGV4aXN0cwogICAgPT0KICAgIGJueiBjbG9zZV9ib29sX3RydWVAMgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo3MjIKICAgIC8vIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgPT0KICAgIGJ6IGNsb3NlX2Jvb2xfZmFsc2VAMwoKY2xvc2VfYm9vbF90cnVlQDI6CiAgICBpbnQgMQogICAgYiBjbG9zZV9ib29sX21lcmdlQDQKCmNsb3NlX2Jvb2xfZmFsc2VAMzoKICAgIGludCAwCgpjbG9zZV9ib29sX21lcmdlQDQ6CiAgICAvLyBzcmMvY29udHJhY3QucHk6NzIwLTcyMwogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlcgogICAgLy8gKSwgIm11c3QgYmUgb3duZXIgb3IgZnVuZGVyIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIgb3IgZnVuZGVyCiAgICAvLyBzcmMvY29udHJhY3QucHk6NzI0LTcyNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gY2xvc2Vfb2ZmbGluZV9vbl9kZWxldGUoc2VsZi5vd25lcikKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjcyNC03MjUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlKHNlbGYub3duZXIpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBjYWxsc3ViIGNsb3NlX29mZmxpbmVfb25fZGVsZXRlCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5Pd25hYmxlLnRyYW5zZmVyKG5ld19vd25lcjogYnl0ZXMpIC0+IHZvaWQ6CnRyYW5zZmVyOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjYzLTY0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiB0cmFuc2ZlcihzZWxmLCBuZXdfb3duZXI6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9jb250cmFjdC5weTo2NgogICAgLy8gc2VsZi5vd25lciA9IG5ld19vd25lci5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkZ1bmRhYmxlLmZpbGwoKSAtPiB2b2lkOgpmaWxsOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEzMC0xMzEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGZpbGwoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEzMi0xMzMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciwgIm11c3QgYmUgZnVuZGVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weToxMzItMTMzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTM0LTEzNQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHBheW1lbnRfYW1vdW50ID0gcmVxdWlyZV9wYXltZW50KHNlbGYuZnVuZGVyKQogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weToxMzQtMTM1CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gcGF5bWVudF9hbW91bnQgPSByZXF1aXJlX3BheW1lbnQoc2VsZi5mdW5kZXIpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgY2FsbHN1YiByZXF1aXJlX3BheW1lbnQKICAgIC8vIHNyYy9jb250cmFjdC5weToxMzctMTM4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi50b3RhbCA9IHNlbGYudG90YWwgKyBwYXltZW50X2Ftb3VudAogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi50b3RhbCA9IFVJbnQ2NCgpCiAgICBieXRlICJ0b3RhbCIKICAgIC8vIHNyYy9jb250cmFjdC5weToxMzctMTM4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi50b3RhbCA9IHNlbGYudG90YWwgKyBwYXltZW50X2Ftb3VudAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsIGV4aXN0cwogICAgKwogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLnRvdGFsID0gVUludDY0KCkKICAgIGJ5dGUgInRvdGFsIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjEzNy0xMzgKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnRvdGFsID0gc2VsZi50b3RhbCArIHBheW1lbnRfYW1vdW50CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gdXRpbHMucmVxdWlyZV9wYXltZW50KHdobzogYnl0ZXMpIC0+IHVpbnQ2NDoKcmVxdWlyZV9wYXltZW50OgogICAgLy8gc3JjL3V0aWxzLnB5OjE1LTIzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyAjIGZ1bmN0aW9uOiByZXF1aXJlX3BheW1lbnQgKGludGVybmFsKQogICAgLy8gIyBhcmd1bWVudHM6IE5vbmUKICAgIC8vICMgcHVycG9zZTogY2hlY2sgcGF5bWVudAogICAgLy8gIyBwcmUtY29uZGl0aW9uczogTm9uZQogICAgLy8gIyBwb3N0LWNvbmRpdGlvbnM6IE5vbmUKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcmVxdWlyZV9wYXltZW50KHdobzogQWNjb3VudCkgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzcmMvdXRpbHMucHk6MjQKICAgIC8vIHJlZl9ncm91cF9pbmRleCA9IFR4bi5ncm91cF9pbmRleAogICAgdHhuIEdyb3VwSW5kZXgKICAgIC8vIHNyYy91dGlscy5weToyNQogICAgLy8gYXNzZXJ0IHJlZl9ncm91cF9pbmRleCA+IDAsICJncm91cCBpbmRleCBncmVhdGVyIHRoYW4gemVybyIKICAgIGR1cAogICAgYXNzZXJ0IC8vIGdyb3VwIGluZGV4IGdyZWF0ZXIgdGhhbiB6ZXJvCiAgICAvLyBzcmMvdXRpbHMucHk6MjYKICAgIC8vIHBheW1lbnRfZ3JvdXBfaW5kZXggPSByZWZfZ3JvdXBfaW5kZXggLSAxCiAgICBpbnQgMQogICAgLQogICAgLy8gc3JjL3V0aWxzLnB5OjI4CiAgICAvLyBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5zZW5kZXIgPT0gd2hvCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICBkdXAKICAgIGd0eG5zIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgLy8gc3JjL3V0aWxzLnB5OjI3LTI5CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKHBheW1lbnRfZ3JvdXBfaW5kZXgpLnNlbmRlciA9PSB3aG8KICAgIC8vICksICJwYXltZW50IHNlbmRlciBhY2N1cmF0ZSIKICAgIGFzc2VydCAvLyBwYXltZW50IHNlbmRlciBhY2N1cmF0ZQogICAgLy8gc3JjL3V0aWxzLnB5OjMxCiAgICAvLyBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlcgogICAgZHVwCiAgICBndHhucyBSZWNlaXZlcgogICAgLy8gc3JjL3V0aWxzLnB5OjMyCiAgICAvLyA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc3JjL3V0aWxzLnB5OjMxLTMyCiAgICAvLyBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlcgogICAgLy8gPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgPT0KICAgIC8vIHNyYy91dGlscy5weTozMC0zMwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBndHhuLlBheW1lbnRUcmFuc2FjdGlvbihwYXltZW50X2dyb3VwX2luZGV4KS5yZWNlaXZlcgogICAgLy8gICAgID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJwYXltZW50IHJlY2VpdmVyIGFjY3VyYXRlIgogICAgYXNzZXJ0IC8vIHBheW1lbnQgcmVjZWl2ZXIgYWNjdXJhdGUKICAgIC8vIHNyYy91dGlscy5weTozNAogICAgLy8gcmV0dXJuIGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKHBheW1lbnRfZ3JvdXBfaW5kZXgpLmFtb3VudAogICAgZ3R4bnMgQW1vdW50CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5GdW5kYWJsZS5ncmFudF9mdW5kZXIoZnVuZGVyOiBieXRlcykgLT4gdm9pZDoKZ3JhbnRfZnVuZGVyOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE0MC0xNDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGdyYW50X2Z1bmRlcihzZWxmLCBmdW5kZXI6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciwgIm11c3QgYmUgZnVuZGVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgImZ1bmRlciIKICAgIC8vIHNyYy9jb250cmFjdC5weToxNDItMTQzCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5mdW5kZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgZnVuZGVyCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTQ0LTE0NQogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYuZnVuZGVyID0gZnVuZGVyLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuRnVuZGFibGUuc2V0X2Z1bmRpbmcoZnVuZGluZzogYnl0ZXMpIC0+IHZvaWQ6CnNldF9mdW5kaW5nOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE0Ny0xNDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF9mdW5kaW5nKHNlbGYsIGZ1bmRpbmc6IGFyYzQuVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTQ5LTE1MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyLCAibXVzdCBiZSBmdW5kZXIiCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBzZWxmLmZ1bmRlciA9IEFjY291bnQoKQogICAgYnl0ZSAiZnVuZGVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE0OS0xNTAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmZ1bmRlciwgIm11c3QgYmUgZnVuZGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRlciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBmdW5kZXIKICAgIC8vIHNyYy9jb250cmFjdC5weToxNTMKICAgIC8vIHNlbGYuZnVuZGluZyA9PSBVSW50NjQoMCkgb3Igc2VsZi5mdW5kaW5nID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTAKICAgIC8vIHNlbGYuZnVuZGluZyA9IFVJbnQ2NCgpCiAgICBieXRlICJmdW5kaW5nIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE1MwogICAgLy8gc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKSBvciBzZWxmLmZ1bmRpbmcgPiBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZ1bmRpbmcgZXhpc3RzCiAgICBieiBzZXRfZnVuZGluZ19ib29sX3RydWVAMgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTUzCiAgICAvLyBzZWxmLmZ1bmRpbmcgPT0gVUludDY0KDApIG9yIHNlbGYuZnVuZGluZyA+IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgID4KICAgIGJ6IHNldF9mdW5kaW5nX2Jvb2xfZmFsc2VAMwoKc2V0X2Z1bmRpbmdfYm9vbF90cnVlQDI6CiAgICBpbnQgMQogICAgYiBzZXRfZnVuZGluZ19ib29sX21lcmdlQDQKCnNldF9mdW5kaW5nX2Jvb2xfZmFsc2VAMzoKICAgIGludCAwCgpzZXRfZnVuZGluZ19ib29sX21lcmdlQDQ6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTUxLTE1NAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKSBvciBzZWxmLmZ1bmRpbmcgPiBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcAogICAgLy8gKSwgImZ1bmRpbmcgbm90IGJlIGluaXRpYWxpemVkIG9yIGNhbiBiZSBleHRlbmRlZCIKICAgIGFzc2VydCAvLyBmdW5kaW5nIG5vdCBiZSBpbml0aWFsaXplZCBvciBjYW4gYmUgZXh0ZW5kZWQKICAgIC8vIHNyYy9jb250cmFjdC5weToxNTUtMTU2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5mdW5kaW5nID0gZnVuZGluZy5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgYnl0ZSAiZnVuZGluZyIKICAgIC8vIHNyYy9jb250cmFjdC5weToxNTUtMTU2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gc2VsZi5mdW5kaW5nID0gZnVuZGluZy5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5GdW5kYWJsZS5yZWR1Y2VfdG90YWwoYWRqdXN0bWVudDogYnl0ZXMpIC0+IHZvaWQ6CnJlZHVjZV90b3RhbDoKICAgIC8vIHNyYy9jb250cmFjdC5weToxNjctMTY4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiByZWR1Y2VfdG90YWwoc2VsZiwgYWRqdXN0bWVudDogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9jb250cmFjdC5weToxNjktMTcwCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5mdW5kZXIsICJtdXN0IGJlIGZ1bmRlciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTY5LTE3MAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZnVuZGVyLCAibXVzdCBiZSBmdW5kZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGVyIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGZ1bmRlcgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE3MS0xNzIKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgc2VsZi5mdW5kaW5nID09IFVJbnQ2NCgwKQogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTcxLTE3MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBzZWxmLmZ1bmRpbmcgPT0gVUludDY0KDApCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZnVuZGluZyBleGlzdHMKICAgICEKICAgIGFzc2VydAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE3My0xNzQKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgYWRqdXN0bWVudCA8PSBzZWxmLnRvdGFsLCAiYWRqdXN0bWVudCBhY2N1cmF0ZSIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTczLTE3NAogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGFzc2VydCBhZGp1c3RtZW50IDw9IHNlbGYudG90YWwsICJhZGp1c3RtZW50IGFjY3VyYXRlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsIGV4aXN0cwogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBiPj0KICAgIGFzc2VydCAvLyBhZGp1c3RtZW50IGFjY3VyYXRlCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTc1LTE3NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBzZWxmLnRvdGFsIC0gYWRqdXN0bWVudC5uYXRpdmUKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MTc1LTE3NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIHNlbGYudG90YWwgPSBzZWxmLnRvdGFsIC0gYWRqdXN0bWVudC5uYXRpdmUKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbCBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBzZWxmLnRvdGFsID0gVUludDY0KCkKICAgIGJ5dGUgInRvdGFsIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE3NS0xNzYKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBzZWxmLnRvdGFsID0gc2VsZi50b3RhbCAtIGFkanVzdG1lbnQubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuU3Rha2VhYmxlLnNldF9kZWxlZ2F0ZShkZWxlZ2F0ZTogYnl0ZXMpIC0+IHZvaWQ6CnNldF9kZWxlZ2F0ZToKICAgIC8vIHNyYy9jb250cmFjdC5weToyMjYtMjI3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRfZGVsZWdhdGUoc2VsZiwgZGVsZWdhdGU6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIyOQogICAgLy8gVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyIG9yIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjI5CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYm56IHNldF9kZWxlZ2F0ZV9ib29sX3RydWVAMgogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYnogc2V0X2RlbGVnYXRlX2Jvb2xfZmFsc2VAMwoKc2V0X2RlbGVnYXRlX2Jvb2xfdHJ1ZUAyOgogICAgaW50IDEKICAgIGIgc2V0X2RlbGVnYXRlX2Jvb2xfbWVyZ2VANAoKc2V0X2RlbGVnYXRlX2Jvb2xfZmFsc2VAMzoKICAgIGludCAwCgpzZXRfZGVsZWdhdGVfYm9vbF9tZXJnZUA0OgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIyOC0yMzAKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyIG9yIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgIm11c3QgYmUgb3duZXIgb3IgY3JlYXRvciIKICAgIGFzc2VydCAvLyBtdXN0IGJlIG93bmVyIG9yIGNyZWF0b3IKICAgIC8vIHNyYy9jb250cmFjdC5weToxOTIKICAgIC8vIHNlbGYuZGVsZWdhdGUgPSBBY2NvdW50KCkKICAgIGJ5dGUgImRlbGVnYXRlIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjIzMQogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IGRlbGVnYXRlLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuU3Rha2VhYmxlLnBhcnRpY2lwYXRlKHZvdGVfazogYnl0ZXMsIHNlbF9rOiBieXRlcywgdm90ZV9mc3Q6IGJ5dGVzLCB2b3RlX2xzdDogYnl0ZXMsIHZvdGVfa2Q6IGJ5dGVzLCBzcF9rZXk6IGJ5dGVzKSAtPiB2b2lkOgpwYXJ0aWNpcGF0ZToKICAgIC8vIHNyYy9jb250cmFjdC5weToyMzMtMjQyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBwYXJ0aWNpcGF0ZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHZvdGVfazogQnl0ZXMzMiwKICAgIC8vICAgICBzZWxfazogQnl0ZXMzMiwKICAgIC8vICAgICB2b3RlX2ZzdDogYXJjNC5VSW50NjQsCiAgICAvLyAgICAgdm90ZV9sc3Q6IGFyYzQuVUludDY0LAogICAgLy8gICAgIHZvdGVfa2Q6IGFyYzQuVUludDY0LAogICAgLy8gICAgIHNwX2tleTogQnl0ZXM2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDYgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI0NQogICAgLy8gVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyIG9yIFR4bi5zZW5kZXIgPT0gc2VsZi5kZWxlZ2F0ZQogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgYnl0ZSAib3duZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjQ1CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmRlbGVnYXRlCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYm56IHBhcnRpY2lwYXRlX2Jvb2xfdHJ1ZUAyCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE5MgogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IEFjY291bnQoKQogICAgYnl0ZSAiZGVsZWdhdGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjQ1CiAgICAvLyBUeG4uc2VuZGVyID09IHNlbGYub3duZXIgb3IgVHhuLnNlbmRlciA9PSBzZWxmLmRlbGVnYXRlCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVsZWdhdGUgZXhpc3RzCiAgICA9PQogICAgYnogcGFydGljaXBhdGVfYm9vbF9mYWxzZUAzCgpwYXJ0aWNpcGF0ZV9ib29sX3RydWVAMjoKICAgIGludCAxCiAgICBiIHBhcnRpY2lwYXRlX2Jvb2xfbWVyZ2VANAoKcGFydGljaXBhdGVfYm9vbF9mYWxzZUAzOgogICAgaW50IDAKCnBhcnRpY2lwYXRlX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDMtMjQ2CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciBvciBUeG4uc2VuZGVyID09IHNlbGYuZGVsZWdhdGUKICAgIC8vICksICJtdXN0IGJlIG93bmVyIG9yIGRlbGVnYXRlIgogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIgb3IgZGVsZWdhdGUKICAgIC8vIHNyYy9jb250cmFjdC5weToyNDctMjQ4CiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBrZXlfcmVnX2ZlZSA9IEdsb2JhbC5taW5fdHhuX2ZlZQogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI0OS0yNTAKICAgIC8vICMgcmVxdWlyZSBwYXltZW50IG9mIG1pbiBmZWUgdG8gcHJldmVudCBkcmFpbmluZwogICAgLy8gYXNzZXJ0IHJlcXVpcmVfcGF5bWVudChUeG4uc2VuZGVyKSA9PSBrZXlfcmVnX2ZlZSwgInBheW1lbnQgYW1vdXQgYWNjdXJhdGUiCiAgICB0eG4gU2VuZGVyCiAgICBjYWxsc3ViIHJlcXVpcmVfcGF5bWVudAogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gcGF5bWVudCBhbW91dCBhY2N1cmF0ZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1MS0yNjAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGl0eG4uS2V5UmVnaXN0cmF0aW9uKAogICAgLy8gICAgIHZvdGVfa2V5PXZvdGVfay5ieXRlcywKICAgIC8vICAgICBzZWxlY3Rpb25fa2V5PXNlbF9rLmJ5dGVzLAogICAgLy8gICAgIHZvdGVfZmlyc3Q9dm90ZV9mc3QubmF0aXZlLAogICAgLy8gICAgIHZvdGVfbGFzdD12b3RlX2xzdC5uYXRpdmUsCiAgICAvLyAgICAgdm90ZV9rZXlfZGlsdXRpb249dm90ZV9rZC5uYXRpdmUsCiAgICAvLyAgICAgc3RhdGVfcHJvb2Zfa2V5PXNwX2tleS5ieXRlcywKICAgIC8vICAgICBmZWU9a2V5X3JlZ19mZWUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjU1CiAgICAvLyB2b3RlX2ZpcnN0PXZvdGVfZnN0Lm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtNAogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1NgogICAgLy8gdm90ZV9sYXN0PXZvdGVfbHN0Lm5hdGl2ZSwKICAgIGZyYW1lX2RpZyAtMwogICAgYnRvaQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1NwogICAgLy8gdm90ZV9rZXlfZGlsdXRpb249dm90ZV9rZC5uYXRpdmUsCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBTdGF0ZVByb29mUEsKICAgIGl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCiAgICBpdHhuX2ZpZWxkIFZvdGVMYXN0CiAgICBpdHhuX2ZpZWxkIFZvdGVGaXJzdAogICAgZnJhbWVfZGlnIC01CiAgICBpdHhuX2ZpZWxkIFNlbGVjdGlvblBLCiAgICBmcmFtZV9kaWcgLTYKICAgIGl0eG5fZmllbGQgVm90ZVBLCiAgICAvLyBzcmMvY29udHJhY3QucHk6MjUxLTI1MgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gaXR4bi5LZXlSZWdpc3RyYXRpb24oCiAgICBpbnQga2V5cmVnCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjI1MS0yNjAKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vIGl0eG4uS2V5UmVnaXN0cmF0aW9uKAogICAgLy8gICAgIHZvdGVfa2V5PXZvdGVfay5ieXRlcywKICAgIC8vICAgICBzZWxlY3Rpb25fa2V5PXNlbF9rLmJ5dGVzLAogICAgLy8gICAgIHZvdGVfZmlyc3Q9dm90ZV9mc3QubmF0aXZlLAogICAgLy8gICAgIHZvdGVfbGFzdD12b3RlX2xzdC5uYXRpdmUsCiAgICAvLyAgICAgdm90ZV9rZXlfZGlsdXRpb249dm90ZV9rZC5uYXRpdmUsCiAgICAvLyAgICAgc3RhdGVfcHJvb2Zfa2V5PXNwX2tleS5ieXRlcywKICAgIC8vICAgICBmZWU9a2V5X3JlZ19mZWUsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVXBncmFkZWFibGUuc2V0X3ZlcnNpb24oY29udHJhY3RfdmVyc2lvbjogYnl0ZXMsIGRlcGxveW1lbnRfdmVyc2lvbjogYnl0ZXMpIC0+IHZvaWQ6CnNldF92ZXJzaW9uOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM0OC0zNTEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF92ZXJzaW9uKAogICAgLy8gICAgIHNlbGYsIGNvbnRyYWN0X3ZlcnNpb246IGFyYzQuVUludDY0LCBkZXBsb3ltZW50X3ZlcnNpb246IGFyYzQuVUludDY0CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsICJtdXN0IGJlIGNyZWF0b3IiCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdG9yCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzUzCiAgICAvLyBzZWxmLmNvbnRyYWN0X3ZlcnNpb24gPSBjb250cmFjdF92ZXJzaW9uLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzExCiAgICAvLyBzZWxmLmNvbnRyYWN0X3ZlcnNpb24gPSBVSW50NjQoKQogICAgYnl0ZSAiY29udHJhY3RfdmVyc2lvbiIKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTMKICAgIC8vIHNlbGYuY29udHJhY3RfdmVyc2lvbiA9IGNvbnRyYWN0X3ZlcnNpb24ubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM1NAogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBkZXBsb3ltZW50X3ZlcnNpb24ubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9jb250cmFjdC5weTozMTIKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gVUludDY0KCkKICAgIGJ5dGUgImRlcGxveW1lbnRfdmVyc2lvbiIKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTQKICAgIC8vIHNlbGYuZGVwbG95bWVudF92ZXJzaW9uID0gZGVwbG95bWVudF92ZXJzaW9uLm5hdGl2ZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlVwZ3JhZGVhYmxlLmFwcHJvdmVfdXBkYXRlKGFwcHJvdmFsOiBieXRlcykgLT4gdm9pZDoKYXBwcm92ZV91cGRhdGU6CiAgICAvLyBzcmMvY29udHJhY3QucHk6MzY1LTM3NgogICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gIyBmdW5jdGlvbjogYXBwcm92ZV91cGRhdGUKICAgIC8vICMgYXJndW1lbnRzOgogICAgLy8gIyAtIGFwcHJvdmFsLCBhcHByb3ZhbCBzdGF0dXMKICAgIC8vICMgcHVycG9zZTogYXBwcm92ZSB1cGRhdGUKICAgIC8vICMgcHJlLWNvbmRpdGlvbnMKICAgIC8vICMgLSBvbmx5IGNhbGxhYmxlIGJ5IG93bmVyCiAgICAvLyAjIHBvc3QtY29uZGl0aW9uczoKICAgIC8vICMgLSB1cGRhdGFibGUgc2V0IHRvIGFwcHJvdmFsCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBhcHByb3ZlX3VwZGF0ZShzZWxmLCBhcHByb3ZhbDogYXJjNC5Cb29sKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6Mzc3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM3NwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5vd25lciwgIm11c3QgYmUgb3duZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIG11c3QgYmUgb3duZXIKICAgIC8vIHNyYy9jb250cmFjdC5weTozNzgKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYXBwcm92YWwubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBnZXRiaXQKICAgIC8vIHNyYy9jb250cmFjdC5weTozMTMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgYnl0ZSAidXBkYXRhYmxlIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM3OAogICAgLy8gc2VsZi51cGRhdGFibGUgPSBhcHByb3ZhbC5uYXRpdmUKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5EZXBsb3lhYmxlLm9uX2NyZWF0ZSgpIC0+IHZvaWQ6Cm9uX2NyZWF0ZToKICAgIC8vIHNyYy9jb250cmFjdC5weTo0MTEtNDEyCiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICAvLyBkZWYgb25fY3JlYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTo0MTMKICAgIC8vIGNhbGxlcl9pZCA9IEdsb2JhbC5jYWxsZXJfYXBwbGljYXRpb25faWQKICAgIGdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbklECiAgICAvLyBzcmMvY29udHJhY3QucHk6NDE0CiAgICAvLyBhc3NlcnQgY2FsbGVyX2lkID4gMCwgIm11c3QgYmUgY3JlYXRlZCBieSBmYWN0b3J5IgogICAgZHVwCiAgICBhc3NlcnQgLy8gbXVzdCBiZSBjcmVhdGVkIGJ5IGZhY3RvcnkKICAgIC8vIHNyYy9jb250cmFjdC5weTozOTYKICAgIC8vIHNlbGYucGFyZW50X2lkID0gVUludDY0KCkKICAgIGJ5dGUgInBhcmVudF9pZCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo0MTUKICAgIC8vIHNlbGYucGFyZW50X2lkID0gY2FsbGVyX2lkCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVXBncmFkZWFibGUub25fdXBkYXRlKCkgLT4gdm9pZDoKb25fdXBkYXRlOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM1Ni0zNTcKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIlVwZGF0ZUFwcGxpY2F0aW9uIl0pCiAgICAvLyBkZWYgb25fdXBkYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTozNTgtMzYxCiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgIC8vICMgV0FSTklORzogVGhpcyBhcHAgY2FuIGJlIHVwZGF0ZWQgYnkgdGhlIGNyZWF0b3IKICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcywgIm11c3QgYmUgY3JlYXRvciIKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBtdXN0IGJlIGNyZWF0b3IKICAgIC8vIHNyYy9jb250cmFjdC5weTozNjIKICAgIC8vIGFzc2VydCBzZWxmLnVwZGF0YWJsZSA9PSBVSW50NjQoMSksICJub3QgYXBwcm92ZWQiCiAgICBpbnQgMAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMxMwogICAgLy8gc2VsZi51cGRhdGFibGUgPSBib29sKDEpCiAgICBieXRlICJ1cGRhdGFibGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6MzYyCiAgICAvLyBhc3NlcnQgc2VsZi51cGRhdGFibGUgPT0gVUludDY0KDEpLCAibm90IGFwcHJvdmVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVwZGF0YWJsZSBleGlzdHMKICAgIGludCAxCiAgICA9PQogICAgYXNzZXJ0IC8vIG5vdCBhcHByb3ZlZAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuQWlyZHJvcC5fX2luaXRfXygpIC0+IHZvaWQ6Cl9faW5pdF9fOgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg0MwogICAgLy8gZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNyYy9jb250cmFjdC5weTozOTYKICAgIC8vIHNlbGYucGFyZW50X2lkID0gVUludDY0KCkKICAgIGJ5dGUgInBhcmVudF9pZCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDQtODQ1CiAgICAvLyAjIGRlcGxveWFibGUgc3RhdGUKICAgIC8vIHNlbGYucGFyZW50X2lkID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjM5NwogICAgLy8gc2VsZi5kZXBsb3llciA9IEFjY291bnQoKQogICAgYnl0ZSAiZGVwbG95ZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQ2CiAgICAvLyBzZWxmLmRlcGxveWVyID0gQWNjb3VudCgpCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MTkyCiAgICAvLyBzZWxmLmRlbGVnYXRlID0gQWNjb3VudCgpCiAgICBieXRlICJkZWxlZ2F0ZSIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NDctODQ4CiAgICAvLyAjIHN0YWtlYWJsZSBzdGF0ZQogICAgLy8gc2VsZi5kZWxlZ2F0ZSA9IEFjY291bnQoKQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjE5MwogICAgLy8gc2VsZi5zdGFrZWFibGUgPSBib29sKDEpCiAgICBieXRlICJzdGFrZWFibGUiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQ5CiAgICAvLyBzZWxmLnN0YWtlYWJsZSA9IGJvb2woMSkKICAgIGludCAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMxMQogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gVUludDY0KCkKICAgIGJ5dGUgImNvbnRyYWN0X3ZlcnNpb24iCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODUwLTg1MQogICAgLy8gIyB1cGdyYWRlYWJsZSBzdGF0ZQogICAgLy8gc2VsZi5jb250cmFjdF92ZXJzaW9uID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjMxMgogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKQogICAgYnl0ZSAiZGVwbG95bWVudF92ZXJzaW9uIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg1MgogICAgLy8gc2VsZi5kZXBsb3ltZW50X3ZlcnNpb24gPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6MzEzCiAgICAvLyBzZWxmLnVwZGF0YWJsZSA9IGJvb2woMSkKICAgIGJ5dGUgInVwZGF0YWJsZSIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NTMKICAgIC8vIHNlbGYudXBkYXRhYmxlID0gYm9vbCgxKQogICAgaW50IDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6NDkKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg1NC04NTUKICAgIC8vICMgb3duYWJsZSBzdGF0ZQogICAgLy8gc2VsZi5vd25lciA9IEFjY291bnQoKQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJwZXJpb2QiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODU2LTg1NwogICAgLy8gIyBsb2NrYWJsZSBzdGF0ZQogICAgLy8gc2VsZi5wZXJpb2QgPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6NDQyCiAgICAvLyBzZWxmLmluaXRpYWwgPSBVSW50NjQoKSAgIyAwCiAgICBieXRlICJpbml0aWFsIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg1OAogICAgLy8gc2VsZi5pbml0aWFsID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0MwogICAgLy8gc2VsZi5kZWFkbGluZSA9IFVJbnQ2NCgpICAjIDAKICAgIGJ5dGUgImRlYWRsaW5lIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg1OQogICAgLy8gc2VsZi5kZWFkbGluZSA9IFVJbnQ2NCgpCiAgICBpbnQgMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDQKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfU0VDT05EUyIpICAjIGV4KSAyNTkyMDAwCiAgICBieXRlICJwZXJpb2Rfc2Vjb25kcyIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NjAKICAgIC8vIHNlbGYucGVyaW9kX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfU0VDT05EUyIpCiAgICBpbnQgVE1QTF9QRVJJT0RfU0VDT05EUwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDUKICAgIC8vIHNlbGYubG9ja3VwX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiTE9DS1VQX0RFTEFZIikgICMgZXgpIDEyCiAgICBieXRlICJsb2NrdXBfZGVsYXkiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODYxCiAgICAvLyBzZWxmLmxvY2t1cF9kZWxheSA9IFRlbXBsYXRlVmFyW1VJbnQ2NF0oIkxPQ0tVUF9ERUxBWSIpCiAgICBpbnQgVE1QTF9MT0NLVVBfREVMQVkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6NDQ2CiAgICAvLyBzZWxmLnZlc3RpbmdfZGVsYXkgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVNUSU5HX0RFTEFZIikgICMgZXgpIDEyCiAgICBieXRlICJ2ZXN0aW5nX2RlbGF5IgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg2MgogICAgLy8gc2VsZi52ZXN0aW5nX2RlbGF5ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiVkVTVElOR19ERUxBWSIpCiAgICBpbnQgVE1QTF9WRVNUSU5HX0RFTEFZCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0NwogICAgLy8gc2VsZi5wZXJpb2RfbGltaXQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfTElNSVQiKSAgIyBleCkgNQogICAgYnl0ZSAicGVyaW9kX2xpbWl0IgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg2MwogICAgLy8gc2VsZi5wZXJpb2RfbGltaXQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJQRVJJT0RfTElNSVQiKQogICAgaW50IFRNUExfUEVSSU9EX0xJTUlUCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5OjQ0OAogICAgLy8gc2VsZi5kaXN0cmlidXRpb25fY291bnQgPSBUZW1wbGF0ZVZhcltVSW50NjRdKCJESVNUUklCVVRJT05fQ09VTlQiKSAgIyBleCkgMTIKICAgIGJ5dGUgImRpc3RyaWJ1dGlvbl9jb3VudCIKICAgIC8vIHNyYy9jb250cmFjdC5weTo4NjQKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX2NvdW50ID0gVGVtcGxhdGVWYXJbVUludDY0XSgiRElTVFJJQlVUSU9OX0NPVU5UIikKICAgIGludCBUTVBMX0RJU1RSSUJVVElPTl9DT1VOVAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo0NDkKICAgIC8vIHNlbGYuZGlzdHJpYnV0aW9uX3NlY29uZHMgPSBUZW1wbGF0ZVZhcltVSW50NjRdKAogICAgYnl0ZSAiZGlzdHJpYnV0aW9uX3NlY29uZHMiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODY1CiAgICAvLyBzZWxmLmRpc3RyaWJ1dGlvbl9zZWNvbmRzID0gVGVtcGxhdGVWYXJbVUludDY0XSgiRElTVFJJQlVUSU9OX1NFQ09ORFMiKQogICAgaW50IFRNUExfRElTVFJJQlVUSU9OX1NFQ09ORFMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuZnVuZGVyID0gQWNjb3VudCgpCiAgICBieXRlICJmdW5kZXIiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODY2LTg2NwogICAgLy8gIyBmdW5kYWJsZSBzdGF0ZQogICAgLy8gc2VsZi5mdW5kZXIgPSBBY2NvdW50KCkKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNyYy9jb250cmFjdC5weTo5MAogICAgLy8gc2VsZi5mdW5kaW5nID0gVUludDY0KCkKICAgIGJ5dGUgImZ1bmRpbmciCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODY4CiAgICAvLyBzZWxmLmZ1bmRpbmcgPSBVSW50NjQoKQogICAgaW50IDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzcmMvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYudG90YWwgPSBVSW50NjQoKQogICAgYnl0ZSAidG90YWwiCiAgICAvLyBzcmMvY29udHJhY3QucHk6ODY5CiAgICAvLyBzZWxmLnRvdGFsID0gVUludDY0KCkKICAgIGludCAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojc3MAogICAgLy8gc2VsZi5tZXNzZW5nZXJfaWQgPSBVSW50NjQoKQogICAgYnl0ZSAibWVzc2VuZ2VyX2lkIgogICAgLy8gc3JjL2NvbnRyYWN0LnB5Ojg3MC04NzEKICAgIC8vICMgcmVjZWl2ZXIgc3RhdGUKICAgIC8vIHNlbGYubWVzc2VuZ2VyX2lkID0gVGVtcGxhdGVWYXJbVUludDY0XSgiTUVTU0VOR0VSX0lEIikKICAgIGludCBUTVBMX01FU1NFTkdFUl9JRAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1Ygo=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5BaXJkcm9wLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvY29udHJhY3QucHk6ODQwLTg0MgogICAgLy8gY2xhc3MgQWlyZHJvcCgKICAgIC8vICAgICBMb2NrYWJsZSwgT3duYWJsZSwgRnVuZGFibGUsIERlcGxveWFibGUsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUsIFJlY2VpdmVyCiAgICAvLyApOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 17
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deadline": {
          "type": "uint64",
          "key": "deadline"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployer": {
          "type": "bytes",
          "key": "deployer"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "distribution_count": {
          "type": "uint64",
          "key": "distribution_count"
        },
        "distribution_seconds": {
          "type": "uint64",
          "key": "distribution_seconds"
        },
        "funder": {
          "type": "bytes",
          "key": "funder"
        },
        "funding": {
          "type": "uint64",
          "key": "funding"
        },
        "initial": {
          "type": "uint64",
          "key": "initial"
        },
        "lockup_delay": {
          "type": "uint64",
          "key": "lockup_delay"
        },
        "messenger_id": {
          "type": "uint64",
          "key": "messenger_id"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "parent_id": {
          "type": "uint64",
          "key": "parent_id"
        },
        "period": {
          "type": "uint64",
          "key": "period"
        },
        "period_limit": {
          "type": "uint64",
          "key": "period_limit"
        },
        "period_seconds": {
          "type": "uint64",
          "key": "period_seconds"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "total": {
          "type": "uint64",
          "key": "total"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "vesting_delay": {
          "type": "uint64",
          "key": "vesting_delay"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Airdrop",
    "methods": [
      {
        "name": "abort_funding",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "preconfigure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          },
          {
            "type": "uint64",
            "name": "deadline"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Preconfigure lockup period and deadline."
      },
      {
        "name": "set_vesting_delay",
        "args": [
          {
            "type": "uint64",
            "name": "vesting_delay"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set vesting delay."
      },
      {
        "name": "set_total",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set total funding."
      },
      {
        "name": "set_distribution_count",
        "args": [
          {
            "type": "uint64",
            "name": "distribution_count"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set distribution count."
      },
      {
        "name": "setup",
        "args": [
          {
            "type": "address",
            "name": "deployer"
          },
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "funder"
          },
          {
            "type": "uint64",
            "name": "initial"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "configure",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Withdraw funds from contract."
      },
      {
        "name": "close",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fill",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_funder",
        "args": [
          {
            "type": "address",
            "name": "funder"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_funding",
        "args": [
          {
            "type": "uint64",
            "name": "funding"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reduce_total",
        "args": [
          {
            "type": "uint64",
            "name": "adjustment"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "update_application": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Airdrop smart contract.
 */
export type Airdrop = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'abort_funding()void' | 'abort_funding', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'preconfigure(uint64,uint64)void' | 'preconfigure', {
      argsObj: {
        period: bigint | number
        deadline: bigint | number
      }
      argsTuple: [period: bigint | number, deadline: bigint | number]
      returns: void
    }>
    & Record<'set_vesting_delay(uint64)void' | 'set_vesting_delay', {
      argsObj: {
        vestingDelay: bigint | number
      }
      argsTuple: [vestingDelay: bigint | number]
      returns: void
    }>
    & Record<'set_total(uint64)void' | 'set_total', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
    & Record<'set_distribution_count(uint64)void' | 'set_distribution_count', {
      argsObj: {
        distributionCount: bigint | number
      }
      argsTuple: [distributionCount: bigint | number]
      returns: void
    }>
    & Record<'setup(address,address,address,uint64)void' | 'setup', {
      argsObj: {
        deployer: string
        owner: string
        funder: string
        initial: bigint | number
      }
      argsTuple: [deployer: string, owner: string, funder: string, initial: bigint | number]
      returns: void
    }>
    & Record<'configure(uint64)void' | 'configure', {
      argsObj: {
        period: bigint | number
      }
      argsTuple: [period: bigint | number]
      returns: void
    }>
    & Record<'withdraw(uint64)uint64' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'close()void' | 'close', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'fill()void' | 'fill', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'grant_funder(address)void' | 'grant_funder', {
      argsObj: {
        funder: string
      }
      argsTuple: [funder: string]
      returns: void
    }>
    & Record<'set_funding(uint64)void' | 'set_funding', {
      argsObj: {
        funding: bigint | number
      }
      argsTuple: [funding: bigint | number]
      returns: void
    }>
    & Record<'reduce_total(uint64)void' | 'reduce_total', {
      argsObj: {
        adjustment: bigint | number
      }
      argsTuple: [adjustment: bigint | number]
      returns: void
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      deadline?: IntegerState
      delegate?: BinaryState
      deployer?: BinaryState
      deploymentVersion?: IntegerState
      distributionCount?: IntegerState
      distributionSeconds?: IntegerState
      funder?: BinaryState
      funding?: IntegerState
      initial?: IntegerState
      lockupDelay?: IntegerState
      messengerId?: IntegerState
      owner?: BinaryState
      parentId?: IntegerState
      period?: IntegerState
      periodLimit?: IntegerState
      periodSeconds?: IntegerState
      stakeable?: IntegerState
      total?: IntegerState
      updatable?: IntegerState
      vestingDelay?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AirdropSig = keyof Airdrop['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AirdropSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Airdrop smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AirdropSig> = Airdrop['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Airdrop smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AirdropSig> = Airdrop['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AirdropCreateCalls = (typeof AirdropCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AirdropCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AirdropUpdateCalls = (typeof AirdropCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AirdropUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AirdropDeleteCalls = (typeof AirdropCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AirdropDeleteCallParams =
  | TypedCallParams<'abort_funding()void'>
  | TypedCallParams<'close()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AirdropDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AirdropCreateCalls) => AirdropCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AirdropUpdateCalls) => AirdropUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AirdropDeleteCalls) => AirdropDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AirdropCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Airdrop smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Airdrop smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Airdrop smart contract using the abort_funding()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      abortFunding(args: MethodArgs<'abort_funding()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'abort_funding()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
      /**
       * Constructs a delete call for the Airdrop smart contract using the close()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'close()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the preconfigure(uint64,uint64)void ABI method
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'preconfigure(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period, args.deadline],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_vesting_delay(uint64)void ABI method
   *
   * Set vesting delay.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_vesting_delay(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.vestingDelay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_total(uint64)void ABI method
   *
   * Set total funding.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setTotal(args: MethodArgs<'set_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_total(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_distribution_count(uint64)void ABI method
   *
   * Set distribution count.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_distribution_count(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.distributionCount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setup(address,address,address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setup(address,address,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.deployer, args.owner, args.funder, args.initial],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the configure(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'configure(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)uint64 ABI method
   *
   * Withdraw funds from contract.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the fill()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'fill()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_funder(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantFunder(args: MethodArgs<'grant_funder(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_funder(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_funding(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setFunding(args: MethodArgs<'set_funding(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_funding(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.funding],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reduce_total(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reduce_total(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.adjustment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Airdrop smart contract
 */
export class AirdropClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AirdropClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Airdrop['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Airdrop smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AirdropDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AirdropCallFactory.create)
    const updateArgs = params.updateCall?.(AirdropCallFactory.update)
    const deleteArgs = params.deleteCall?.(AirdropCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Airdrop smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Airdrop smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Airdrop smart contract using the abort_funding()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async abortFunding(args: MethodArgs<'abort_funding()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'abort_funding()void'>>(await $this.appClient.delete(AirdropCallFactory.delete.abortFunding(args, params)))
      },
      /**
       * Deletes an existing instance of the Airdrop smart contract using the close()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async close(args: MethodArgs<'close()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'close()void'>>(await $this.appClient.delete(AirdropCallFactory.delete.close(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Airdrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the preconfigure(uint64,uint64)void ABI method.
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.preconfigure(args, params))
  }

  /**
   * Calls the set_vesting_delay(uint64)void ABI method.
   *
   * Set vesting delay.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setVestingDelay(args, params))
  }

  /**
   * Calls the set_total(uint64)void ABI method.
   *
   * Set total funding.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setTotal(args: MethodArgs<'set_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setTotal(args, params))
  }

  /**
   * Calls the set_distribution_count(uint64)void ABI method.
   *
   * Set distribution count.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setDistributionCount(args, params))
  }

  /**
   * Calls the setup(address,address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setup(args, params))
  }

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public configure(args: MethodArgs<'configure(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.configure(args, params))
  }

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * Withdraw funds from contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.withdraw(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.transfer(args, params))
  }

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public fill(args: MethodArgs<'fill()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.fill(args, params))
  }

  /**
   * Calls the grant_funder(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantFunder(args: MethodArgs<'grant_funder(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.grantFunder(args, params))
  }

  /**
   * Calls the set_funding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setFunding(args: MethodArgs<'set_funding(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setFunding(args, params))
  }

  /**
   * Calls the reduce_total(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.reduceTotal(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.participate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AirdropCallFactory.approveUpdate(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Airdrop['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return AirdropClient.getIntegerState(state, 'contract_version')
      },
      get deadline() {
        return AirdropClient.getIntegerState(state, 'deadline')
      },
      get delegate() {
        return AirdropClient.getBinaryState(state, 'delegate')
      },
      get deployer() {
        return AirdropClient.getBinaryState(state, 'deployer')
      },
      get deploymentVersion() {
        return AirdropClient.getIntegerState(state, 'deployment_version')
      },
      get distributionCount() {
        return AirdropClient.getIntegerState(state, 'distribution_count')
      },
      get distributionSeconds() {
        return AirdropClient.getIntegerState(state, 'distribution_seconds')
      },
      get funder() {
        return AirdropClient.getBinaryState(state, 'funder')
      },
      get funding() {
        return AirdropClient.getIntegerState(state, 'funding')
      },
      get initial() {
        return AirdropClient.getIntegerState(state, 'initial')
      },
      get lockupDelay() {
        return AirdropClient.getIntegerState(state, 'lockup_delay')
      },
      get messengerId() {
        return AirdropClient.getIntegerState(state, 'messenger_id')
      },
      get owner() {
        return AirdropClient.getBinaryState(state, 'owner')
      },
      get parentId() {
        return AirdropClient.getIntegerState(state, 'parent_id')
      },
      get period() {
        return AirdropClient.getIntegerState(state, 'period')
      },
      get periodLimit() {
        return AirdropClient.getIntegerState(state, 'period_limit')
      },
      get periodSeconds() {
        return AirdropClient.getIntegerState(state, 'period_seconds')
      },
      get stakeable() {
        return AirdropClient.getIntegerState(state, 'stakeable')
      },
      get total() {
        return AirdropClient.getIntegerState(state, 'total')
      },
      get updatable() {
        return AirdropClient.getIntegerState(state, 'updatable')
      },
      get vestingDelay() {
        return AirdropClient.getIntegerState(state, 'vesting_delay')
      },
    }
  }

  public compose(): AirdropComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.preconfigure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVestingDelay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setTotal(args: MethodArgs<'set_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setTotal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDistributionCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.configure(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.fill(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantFunder(args: MethodArgs<'grant_funder(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantFunder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setFunding(args: MethodArgs<'set_funding(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setFunding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reduceTotal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          abortFunding(args: MethodArgs<'abort_funding()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.abortFunding(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
          close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.close(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AirdropComposer
  }
}
export type AirdropComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the preconfigure(uint64,uint64)void ABI method.
   *
   * Preconfigure lockup period and deadline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  preconfigure(args: MethodArgs<'preconfigure(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'preconfigure(uint64,uint64)void'>]>

  /**
   * Calls the set_vesting_delay(uint64)void ABI method.
   *
   * Set vesting delay.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVestingDelay(args: MethodArgs<'set_vesting_delay(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_vesting_delay(uint64)void'>]>

  /**
   * Calls the set_total(uint64)void ABI method.
   *
   * Set total funding.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTotal(args: MethodArgs<'set_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_total(uint64)void'>]>

  /**
   * Calls the set_distribution_count(uint64)void ABI method.
   *
   * Set distribution count.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDistributionCount(args: MethodArgs<'set_distribution_count(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_distribution_count(uint64)void'>]>

  /**
   * Calls the setup(address,address,address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setup(args: MethodArgs<'setup(address,address,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'setup(address,address,address,uint64)void'>]>

  /**
   * Calls the configure(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  configure(args: MethodArgs<'configure(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'configure(uint64)void'>]>

  /**
   * Calls the withdraw(uint64)uint64 ABI method.
   *
   * Withdraw funds from contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'withdraw(uint64)uint64'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Calls the fill()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fill(args: MethodArgs<'fill()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'fill()void'>]>

  /**
   * Calls the grant_funder(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantFunder(args: MethodArgs<'grant_funder(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'grant_funder(address)void'>]>

  /**
   * Calls the set_funding(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setFunding(args: MethodArgs<'set_funding(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_funding(uint64)void'>]>

  /**
   * Calls the reduce_total(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reduceTotal(args: MethodArgs<'reduce_total(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'reduce_total(uint64)void'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Airdrop smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): AirdropComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Airdrop smart contract using the abort_funding()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    abortFunding(args: MethodArgs<'abort_funding()void'>, params?: AppClientComposeCallCoreParams): AirdropComposer<[...TReturns, MethodReturn<'abort_funding()void'>]>
    /**
     * Deletes an existing instance of the Airdrop smart contract using the close()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    close(args: MethodArgs<'close()void'>, params?: AppClientComposeCallCoreParams): AirdropComposer<[...TReturns, MethodReturn<'close()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Airdrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AirdropComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AirdropComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AirdropComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AirdropComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AirdropComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AirdropComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
